if ((typeof(pickle$0Polyhash$1)) == "undefined") {pickle$0Polyhash$1 = {};
};
(function(){pickle$0Polyhash$1.mkTable$75 = function(v$91,v$92){return function(v$83){var v$89 = v$83[0];
var v$90 = v$83[1];
var v$87;
var t$1199;
var v$1049;
var nw$837 = SmlPrims.i32_to_w32(v$89);
var fix$1200 = {};
fix$1200.$f = function(i$839){lab$f: while (true) {if (i$839 >= nw$837) {return i$839;
} else {var t$1201 = (i$839 << (1 & 31)) & 4294967295;
var i$839 = t$1201;
continue lab$f;
};
};
};
var f$838 = fix$1200.$f;
v$1049 = (SmlPrims.chk_ovf_i32(f$838(32)));
var v$1050 = null;
if ((0 <= v$1049)?(v$1049 <= 123456789):false) {0;
} else {throw CompilerInitial.exn$Size$53;
};
t$1199 = (SmlPrims.wordTableInit(v$1049,v$1050));
v$87 = [t$1199];
return [v$91,[0],v$90,v$92,v$87];
};
};
pickle$0Polyhash$1.clear$113 = function(v$1168,v$125,v$1169,v$1170,v$124){var a$118 = v$124[0];
var v$1054 = SmlPrims.chk_ovf_i32(a$118.length - 1);
var fix$1202 = {};
fix$1202.$loop = function(i$849){lab$loop: while (true) {if (i$849 > v$1054) {return 0;
} else {var v$1166 = null;
var v$1167 = a$118.length;
if ((0 <= i$849)?(i$849 < v$1167):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
(a$118[i$849] = v$1166,0);
var t$1203 = SmlPrims.chk_ovf_i32(i$849 + 1);
var i$849 = t$1203;
continue lab$loop;
};
};
};
var loop$848 = fix$1202.$loop;
loop$848(0);
return (v$125[0] = 0,0);
};
var growTable$126 = function(v$1171,v$171,v$1172,v$1173,v$170){var arr$131 = v$170[0];
var sz$132 = arr$131.length;
if (v$171[0] >= sz$132) {var newSz$137 = SmlPrims.chk_ovf_i32(sz$132 + sz$132);
var newArr$138;
var v$1061 = null;
if ((0 <= newSz$137)?(newSz$137 <= 123456789):false) {0;
} else {throw CompilerInitial.exn$Size$53;
};
newArr$138 = (SmlPrims.wordTableInit(newSz$137,v$1061));
var fix$1204 = {};
fix$1204.$copy = function(v$142){lab$copy: while (true) {if (v$142 == null) {return 0;
} else {var v$154 = v$142;
var v$155 = v$154[0];
var v$156 = v$155[0];
var v$157 = v$155[1];
var v$158 = v$155[2];
var v$159 = v$154[1];
var indx$151 = SmlPrims.chk_ovf_i32((SmlPrims.i32_to_w32(v$156)) & (SmlPrims.i32_to_w32(SmlPrims.chk_ovf_i32(newSz$137 - 1))));
var v$1068;
var t$1207;
var t$1206 = [v$156,v$157,v$158];
var t$1205;
var v$875 = newArr$138.length;
if ((0 <= indx$151)?(indx$151 < v$875):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1205 = newArr$138[indx$151];
t$1207 = [t$1206,t$1205];
v$1068 = t$1207;
var v$871 = newArr$138.length;
if ((0 <= indx$151)?(indx$151 < v$871):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
(newArr$138[indx$151] = v$1068,0);
var t$1208 = v$159;
var v$142 = t$1208;
continue lab$copy;
};
};
};
var copy$139 = fix$1204.$copy;
var fix$1209 = {};
fix$1209.$bucket = function(n$163){lab$bucket: while (true) {var t$1211 = copy$139;
var t$1210;
var v$879 = arr$131.length;
if ((0 <= n$163)?(n$163 < v$879):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1210 = arr$131[n$163];
t$1211(t$1210);
var t$1212 = SmlPrims.chk_ovf_i32(n$163 + 1);
var n$163 = t$1212;
continue lab$bucket;
};
};
var bucket$160 = fix$1209.$bucket;
try {bucket$160(0);
} catch(v$1213) {(function(v$169){return 0;
})(v$1213);
};
return (v$170[0] = newArr$138,0);
} else {return 0;
};
};
pickle$0Polyhash$1.insert$172 = function(tbl$179){var v$232 = tbl$179[0];
var v$233 = tbl$179[3];
var v$234 = tbl$179[4];
var v$235 = tbl$179[1];
return function(v$183){var v$230 = v$183[0];
var v$231 = v$183[1];
var arr$184 = v$234[0];
var sz$185 = arr$184.length;
var hash$186 = v$232(v$230);
var indx$187 = SmlPrims.chk_ovf_i32((SmlPrims.i32_to_w32(hash$186)) & (SmlPrims.i32_to_w32(SmlPrims.chk_ovf_i32(sz$185 - 1))));
var fix$1214 = {};
fix$1214.$look = function(v$191){if (v$191 == null) {var v$1081;
var t$1219;
var t$1218 = [hash$186,v$230,v$231];
var t$1217;
var v$895 = arr$184.length;
if ((0 <= indx$187)?(indx$187 < v$895):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1217 = arr$184[indx$187];
t$1219 = [t$1218,t$1217];
v$1081 = t$1219;
var v$891 = arr$184.length;
if ((0 <= indx$187)?(indx$187 < v$891):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
(arr$184[indx$187] = v$1081,0);
(v$235[0] = (SmlPrims.chk_ovf_i32(v$235[0] + 1)),0);
growTable$126(tbl$179[0],tbl$179[1],tbl$179[2],tbl$179[3],tbl$179[4]);
return null;
} else {var v$219 = v$191;
var v$220 = v$219[0];
var v$221 = v$220[0];
var v$222 = v$220[1];
var v$223 = v$220[2];
var v$224 = v$219[1];
if ((hash$186 == v$221)?(v$233([v$230,v$222])):false) {return [[hash$186,v$230,v$231],v$224];
} else {var v$214 = fix$1214.$look(v$224);
return (v$214 == null)?null:[[v$221,v$222,v$223],v$214];
};
};
};
var look$188 = fix$1214.$look;
var v$229;
var t$1216 = look$188;
var t$1215;
var v$901 = arr$184.length;
if ((0 <= indx$187)?(indx$187 < v$901):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1215 = arr$184[indx$187];
v$229 = (t$1216(t$1215));
if (v$229 == null) {return 0;
} else {var v$906 = arr$184.length;
if ((0 <= indx$187)?(indx$187 < v$906):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
return (arr$184[indx$187] = v$229,0);
};
};
};
pickle$0Polyhash$1.peekInsert$236 = function(tbl$243){var v$286 = tbl$243[0];
var v$287 = tbl$243[3];
var v$288 = tbl$243[4];
var v$289 = tbl$243[1];
return function(v$247){var v$284 = v$247[0];
var v$285 = v$247[1];
var arr$248 = v$288[0];
var sz$249 = arr$248.length;
var hash$250 = v$286(v$284);
var indx$251 = SmlPrims.chk_ovf_i32((SmlPrims.i32_to_w32(hash$250)) & (SmlPrims.i32_to_w32(SmlPrims.chk_ovf_i32(sz$249 - 1))));
var fix$1220 = {};
fix$1220.$look = function(v$255){lab$look: while (true) {if (v$255 == null) {var v$1097;
var t$1223;
var t$1222 = [hash$250,v$284,v$285];
var t$1221;
var v$921 = arr$248.length;
if ((0 <= indx$251)?(indx$251 < v$921):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1221 = arr$248[indx$251];
t$1223 = [t$1222,t$1221];
v$1097 = t$1223;
var v$917 = arr$248.length;
if ((0 <= indx$251)?(indx$251 < v$917):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
(arr$248[indx$251] = v$1097,0);
(v$289[0] = (SmlPrims.chk_ovf_i32(v$289[0] + 1)),0);
growTable$126(tbl$243[0],tbl$243[1],tbl$243[2],tbl$243[3],tbl$243[4]);
return [1];
} else {var v$278 = v$255;
var v$279 = v$278[0];
var v$280 = v$279[0];
var v$281 = v$279[1];
var v$282 = v$279[2];
var v$283 = v$278[1];
if ((hash$250 == v$280)?(v$287([v$284,v$281])):false) {return [0,v$282];
} else {var t$1224 = v$283;
var v$255 = t$1224;
continue lab$look;
};
};
};
};
var look$252 = fix$1220.$look;
var t$1226 = look$252;
var t$1225;
var v$927 = arr$248.length;
if ((0 <= indx$251)?(indx$251 < v$927):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1225 = arr$248[indx$251];
return t$1226(t$1225);
};
};
pickle$0Polyhash$1.find$290 = function(v$330,v$1174,v$333,v$331,v$332){return function(key$299){var arr$300 = v$332[0];
var sz$301 = arr$300.length;
var hash$302 = v$330(key$299);
var indx$303 = SmlPrims.chk_ovf_i32((SmlPrims.i32_to_w32(hash$302)) & (SmlPrims.i32_to_w32(SmlPrims.chk_ovf_i32(sz$301 - 1))));
var fix$1227 = {};
fix$1227.$look = function(v$307){lab$look: while (true) {if (v$307 == null) {throw v$333;
} else {var v$324 = v$307;
var v$325 = v$324[0];
var v$326 = v$325[0];
var v$327 = v$325[1];
var v$328 = v$325[2];
var v$329 = v$324[1];
if ((hash$302 == v$326)?(v$331([key$299,v$327])):false) {return v$328;
} else {var t$1228 = v$329;
var v$307 = t$1228;
continue lab$look;
};
};
};
};
var look$304 = fix$1227.$look;
var t$1230 = look$304;
var t$1229;
var v$937 = arr$300.length;
if ((0 <= indx$303)?(indx$303 < v$937):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1229 = arr$300[indx$303];
return t$1230(t$1229);
};
};
pickle$0Polyhash$1.peek$334 = function(v$373,v$1175,v$1176,v$374,v$375){return function(key$342){var arr$343 = v$375[0];
var sz$344 = arr$343.length;
var hash$345 = v$373(key$342);
var indx$346 = SmlPrims.chk_ovf_i32((SmlPrims.i32_to_w32(hash$345)) & (SmlPrims.i32_to_w32(SmlPrims.chk_ovf_i32(sz$344 - 1))));
var fix$1231 = {};
fix$1231.$look = function(v$350){lab$look: while (true) {if (v$350 == null) {return [1];
} else {var v$367 = v$350;
var v$368 = v$367[0];
var v$369 = v$368[0];
var v$370 = v$368[1];
var v$371 = v$368[2];
var v$372 = v$367[1];
if ((hash$345 == v$369)?(v$374([key$342,v$370])):false) {return [0,v$371];
} else {var t$1232 = v$372;
var v$350 = t$1232;
continue lab$look;
};
};
};
};
var look$347 = fix$1231.$look;
var t$1234 = look$347;
var t$1233;
var v$947 = arr$343.length;
if ((0 <= indx$346)?(indx$346 < v$947):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1233 = arr$343[indx$346];
return t$1234(t$1233);
};
};
pickle$0Polyhash$1.remove$376 = function(v$433,v$437,v$435,v$434,v$436){return function(key$386){var arr$387 = v$436[0];
var sz$388 = arr$387.length;
var hash$389 = v$433(key$386);
var indx$390 = SmlPrims.chk_ovf_i32((SmlPrims.i32_to_w32(hash$389)) & (SmlPrims.i32_to_w32(SmlPrims.chk_ovf_i32(sz$388 - 1))));
var fix$1235 = {};
fix$1235.$look = function(v$394){if (v$394 == null) {throw v$435;
} else {var v$417 = v$394;
var v$418 = v$417[0];
var v$419 = v$418[0];
var v$420 = v$418[1];
var v$421 = v$418[2];
var v$422 = v$417[1];
if ((hash$389 == v$419)?(v$434([key$386,v$420])):false) {return [v$421,v$422];
} else {var v$410 = fix$1235.$look(v$422);
return [v$410[0],[[v$419,v$420,v$421],v$410[1]]];
};
};
};
var look$391 = fix$1235.$look;
var v$430;
var t$1237 = look$391;
var t$1236;
var v$957 = arr$387.length;
if ((0 <= indx$390)?(indx$390 < v$957):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1236 = arr$387[indx$390];
v$430 = (t$1237(t$1236));
var v$431 = v$430[0];
var v$432 = v$430[1];
var v$962 = arr$387.length;
if ((0 <= indx$390)?(indx$390 < v$962):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
(arr$387[indx$390] = v$432,0);
(v$437[0] = (SmlPrims.chk_ovf_i32(v$437[0] - 1)),0);
return v$431;
};
};
pickle$0Polyhash$1.numItems$438 = function(v$1177,v$1178,v$1179,v$1180,v$1181){return v$1178[0];
};
pickle$0Polyhash$1.listItems$443 = function(v$1182,v$497,v$1183,v$1184,v$496){var arr$448 = v$496[0];
var fix$1238 = {};
fix$1238.$f = function(v$1185,v$1186,v$466){switch (v$466) { case 0: {return v$1186;
 break; }default: {switch (v$1185) { case -1: {return v$1186;
 break; }default: {var fix$1239 = {};
fix$1239.$g = function(v$485,v$1187,v$1188){lab$g: while (true) {if (v$485 == null) {return fix$1238.$f(SmlPrims.chk_ovf_i32(v$1185 - 1),v$1187,v$1188);
} else {var v$488 = v$485;
var v$489 = v$488[0];
var v$490 = v$489[1];
var v$491 = v$489[2];
var v$492 = v$488[1];
var t$1240 = v$492;
var t$1241 = [[v$490,v$491],v$1187];
var t$1242 = SmlPrims.chk_ovf_i32(v$1188 - 1);
var v$485 = t$1240;
var v$1187 = t$1241;
var v$1188 = t$1242;
continue lab$g;
};
};
};
var g$470 = fix$1239.$g;
var t$1244 = g$470;
var t$1243;
var v$969 = arr$448.length;
if ((0 <= v$1185)?(v$1185 < v$969):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1243 = arr$448[v$1185];
return t$1244(t$1243,v$1186,v$466);
} };
} };
};
var f$451 = fix$1238.$f;
return f$451(SmlPrims.chk_ovf_i32(arr$448.length - 1),null,v$497[0]);
};
pickle$0Polyhash$1.apply$498 = function(f$501,v$504){var v$535 = v$504[4];
var fix$1245 = {};
fix$1245.$appF = function(v$508){lab$appF: while (true) {if (v$508 == null) {return 0;
} else {var v$518 = v$508;
var v$519 = v$518[0];
var v$520 = v$519[1];
var v$521 = v$519[2];
var v$522 = v$518[1];
f$501([v$520,v$521]);
var t$1246 = v$522;
var v$508 = t$1246;
continue lab$appF;
};
};
};
var appF$505 = fix$1245.$appF;
var arr$523 = v$535[0];
var sz$524 = arr$523.length;
var fix$1247 = {};
fix$1247.$appToTbl = function(i$528){lab$appToTbl: while (true) {if (i$528 < sz$524) {var t$1249 = appF$505;
var t$1248;
var v$977 = arr$523.length;
if ((0 <= i$528)?(i$528 < v$977):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1248 = arr$523[i$528];
t$1249(t$1248);
var t$1250 = SmlPrims.chk_ovf_i32(i$528 + 1);
var i$528 = t$1250;
continue lab$appToTbl;
} else {return 0;
};
};
};
var appToTbl$525 = fix$1247.$appToTbl;
return appToTbl$525(0);
};
pickle$0Polyhash$1.map$536 = function(f$539,v$546){var v$585 = v$546[0];
var v$586 = v$546[3];
var v$587 = v$546[4];
var v$588 = v$546[1];
var v$589 = v$546[2];
var fix$1251 = {};
fix$1251.$mapF = function(v$550){if (v$550 == null) {return null;
} else {var v$559 = v$550;
var v$560 = v$559[0];
var v$561 = v$560[0];
var v$562 = v$560[1];
var v$563 = v$560[2];
var v$564 = v$559[1];
return [[v$561,v$562,f$539([v$562,v$563])],fix$1251.$mapF(v$564)];
};
};
var mapF$547 = fix$1251.$mapF;
var arr$565 = v$587[0];
var sz$566 = arr$565.length;
var newArr$567;
var v$1132 = null;
if ((0 <= sz$566)?(sz$566 <= 123456789):false) {0;
} else {throw CompilerInitial.exn$Size$53;
};
newArr$567 = (SmlPrims.wordTableInit(sz$566,v$1132));
var fix$1252 = {};
fix$1252.$mapTbl = function(i$571){lab$mapTbl: while (true) {if (i$571 < sz$566) {var v$1135;
var t$1254 = mapF$547;
var t$1253;
var v$991 = arr$565.length;
if ((0 <= i$571)?(i$571 < v$991):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1253 = arr$565[i$571];
v$1135 = (t$1254(t$1253));
var v$987 = newArr$567.length;
if ((0 <= i$571)?(i$571 < v$987):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
(newArr$567[i$571] = v$1135,0);
var t$1255 = SmlPrims.chk_ovf_i32(i$571 + 1);
var i$571 = t$1255;
continue lab$mapTbl;
} else {return 0;
};
};
};
var mapTbl$568 = fix$1252.$mapTbl;
mapTbl$568(0);
var v$582 = [newArr$567];
return [v$585,[v$588[0]],v$589,v$586,v$582];
};
pickle$0Polyhash$1.filter$590 = function(pred$593,v$598){var v$633 = v$598[4];
var fix$1256 = {};
fix$1256.$filterP = function(v$602){lab$filterP: while (true) {if (v$602 == null) {return null;
} else {var v$615 = v$602;
var v$616 = v$615[0];
var v$617 = v$616[0];
var v$618 = v$616[1];
var v$619 = v$616[2];
var v$620 = v$615[1];
if (pred$593([v$618,v$619])) {return [[v$617,v$618,v$619],fix$1256.$filterP(v$620)];
} else {var t$1257 = v$620;
var v$602 = t$1257;
continue lab$filterP;
};
};
};
};
var filterP$599 = fix$1256.$filterP;
var arr$621 = v$633[0];
var sz$622 = arr$621.length;
var fix$1258 = {};
fix$1258.$filterTbl = function(i$626){lab$filterTbl: while (true) {if (i$626 < sz$622) {var v$1140;
var t$1260 = filterP$599;
var t$1259;
var v$1003 = arr$621.length;
if ((0 <= i$626)?(i$626 < v$1003):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1259 = arr$621[i$626];
v$1140 = (t$1260(t$1259));
var v$999 = arr$621.length;
if ((0 <= i$626)?(i$626 < v$999):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
(arr$621[i$626] = v$1140,0);
var t$1261 = SmlPrims.chk_ovf_i32(i$626 + 1);
var i$626 = t$1261;
continue lab$filterTbl;
} else {return 0;
};
};
};
var filterTbl$623 = fix$1258.$filterTbl;
return filterTbl$623(0);
};
pickle$0Polyhash$1.transform$636 = function(f$639,v$646){var v$685 = v$646[0];
var v$686 = v$646[3];
var v$687 = v$646[4];
var v$688 = v$646[1];
var v$689 = v$646[2];
var fix$1262 = {};
fix$1262.$mapF = function(v$650){if (v$650 == null) {return null;
} else {var v$659 = v$650;
var v$660 = v$659[0];
var v$661 = v$660[0];
var v$662 = v$660[1];
var v$663 = v$660[2];
var v$664 = v$659[1];
return [[v$661,v$662,f$639(v$663)],fix$1262.$mapF(v$664)];
};
};
var mapF$647 = fix$1262.$mapF;
var arr$665 = v$687[0];
var sz$666 = arr$665.length;
var newArr$667;
var v$1144 = null;
if ((0 <= sz$666)?(sz$666 <= 123456789):false) {0;
} else {throw CompilerInitial.exn$Size$53;
};
newArr$667 = (SmlPrims.wordTableInit(sz$666,v$1144));
var fix$1263 = {};
fix$1263.$mapTbl = function(i$671){lab$mapTbl: while (true) {if (i$671 < sz$666) {var v$1147;
var t$1265 = mapF$647;
var t$1264;
var v$1017 = arr$665.length;
if ((0 <= i$671)?(i$671 < v$1017):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1264 = arr$665[i$671];
v$1147 = (t$1265(t$1264));
var v$1013 = newArr$667.length;
if ((0 <= i$671)?(i$671 < v$1013):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
(newArr$667[i$671] = v$1147,0);
var t$1266 = SmlPrims.chk_ovf_i32(i$671 + 1);
var i$671 = t$1266;
continue lab$mapTbl;
} else {return 0;
};
};
};
var mapTbl$668 = fix$1263.$mapTbl;
mapTbl$668(0);
var v$682 = [newArr$667];
return [v$685,[v$688[0]],v$689,v$686,v$682];
};
pickle$0Polyhash$1.copy$690 = function(v$716,v$719,v$720,v$717,v$718){var arr$698 = v$718[0];
var sz$699 = arr$698.length;
var newArr$700;
var v$1151 = null;
if ((0 <= sz$699)?(sz$699 <= 123456789):false) {0;
} else {throw CompilerInitial.exn$Size$53;
};
newArr$700 = (SmlPrims.wordTableInit(sz$699,v$1151));
var fix$1267 = {};
fix$1267.$mapTbl = function(i$704){lab$mapTbl: while (true) {var v$1154;
var v$1032 = arr$698.length;
if ((0 <= i$704)?(i$704 < v$1032):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
v$1154 = arr$698[i$704];
var v$1028 = newArr$700.length;
if ((0 <= i$704)?(i$704 < v$1028):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
(newArr$700[i$704] = v$1154,0);
var t$1268 = SmlPrims.chk_ovf_i32(i$704 + 1);
var i$704 = t$1268;
continue lab$mapTbl;
};
};
var mapTbl$701 = fix$1267.$mapTbl;
try {mapTbl$701(0);
} catch(v$1269) {(function(v$715){return 0;
})(v$1269);
};
var v$711 = [newArr$700];
return [v$716,[v$719[0]],v$720,v$717,v$711];
};
pickle$0Polyhash$1.bucketSizes$721 = function(v$1189,v$1190,v$1191,v$1192,v$758){var arr$725 = v$758[0];
var fix$1270 = {};
fix$1270.$len = function(v$739,v$1193){lab$len: while (true) {if (v$739 == null) {return v$1193;
} else {var v$741 = v$739;
var v$742 = v$741[1];
var t$1271 = v$742;
var t$1272 = SmlPrims.chk_ovf_i32(v$1193 + 1);
var v$739 = t$1271;
var v$1193 = t$1272;
continue lab$len;
};
};
};
var len$728 = fix$1270.$len;
var fix$1273 = {};
fix$1273.$f = function(v$755,v$1194){lab$f: while (true) {switch (v$755) { case -1: {return v$1194;
 break; }default: {var t$1279 = SmlPrims.chk_ovf_i32(v$755 - 1);
var t$1278;
var t$1277;
var t$1276;
var t$1275 = len$728;
var t$1274;
var v$1037 = arr$725.length;
if ((0 <= v$755)?(v$755 < v$1037):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1274 = arr$725[v$755];
t$1276 = (t$1275(t$1274,0));
t$1277 = [t$1276,v$1194];
t$1278 = t$1277;
var t$1280 = t$1279;
var t$1281 = t$1278;
var v$755 = t$1280;
var v$1194 = t$1281;
continue lab$f;
} };
};
};
var f$744 = fix$1273.$f;
return f$744(SmlPrims.chk_ovf_i32(arr$725.length - 1),null);
};
pickle$0Polyhash$1.peekSameHash$759 = function(v$795,v$1195,v$1196,v$1197,v$797){return function(key$767){var arr$768 = v$797[0];
var sz$769 = arr$768.length;
var hash$770 = v$795(key$767);
var indx$771 = SmlPrims.chk_ovf_i32((SmlPrims.i32_to_w32(hash$770)) & (SmlPrims.i32_to_w32(SmlPrims.chk_ovf_i32(sz$769 - 1))));
var fix$1282 = {};
fix$1282.$count = function(v$784,v$1198){lab$count: while (true) {if (v$784 == null) {return v$1198;
} else {var v$790 = v$784;
var v$791 = v$790[0];
var v$792 = v$791[0];
var v$793 = v$790[1];
if (hash$770 == v$792) {var t$1283 = v$793;
var t$1284 = SmlPrims.chk_ovf_i32(v$1198 + 1);
var v$784 = t$1283;
var v$1198 = t$1284;
continue lab$count;
} else {var t$1285 = v$793;
var t$1286 = v$1198;
var v$784 = t$1285;
var v$1198 = t$1286;
continue lab$count;
};
};
};
};
var count$772 = fix$1282.$count;
var t$1289;
var t$1288 = count$772;
var t$1287;
var v$1048 = arr$768.length;
if ((0 <= indx$771)?(indx$771 < v$1048):false) {0;
} else {throw CompilerInitial.exn$Subscript$52;
};
t$1287 = arr$768[indx$771];
t$1289 = (t$1288(t$1287,0));
return [t$1289,hash$770];
};
};
return 0;
})();
