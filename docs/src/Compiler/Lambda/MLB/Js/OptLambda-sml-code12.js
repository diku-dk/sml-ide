if ((typeof(compiler0$0OptLambda$1$12)) == "undefined") {compiler0$0OptLambda$1$12 = {};
};
(function(){compiler0$0OptLambda$1$12.en$DiGraphExn$6414 = new String("DiGraphExn");
compiler0$0OptLambda$1$12.pp$6415 = function(t$6418){return tools$0PrettyPrint$1.flatten$936(tools$0PrettyPrint$1.format$937(tools$0Flags$1$1.colwidth$100[0],t$6418));
};
compiler0$0OptLambda$1$12.log$6419 = function(s$6422){return basis$0TextIO$1.output$110(tools$0Flags$1$1.log$101[0],s$6422 + "\n");
};
compiler0$0OptLambda$1$12.die$6423 = function(errmsg$6426){return tools$0Crash$1.impossible$59("IntDiGraph." + errmsg$6426);
};
compiler0$0OptLambda$1$12.footnote$6427 = function(v$7930,v$7931){return v$7930;
};
compiler0$0OptLambda$1$12.freshAttributes$6434 = function(v$6436){var v$6437 = [false];
var v$6438 = [0];
var v$6439 = [0];
return [[0],v$6438,v$6439,[0],v$6437];
};
compiler0$0OptLambda$1$12.getOutSet$6442 = function(n$6445){return n$6445[0][1][2];
};
compiler0$0OptLambda$1$12.getNodes$6451 = function(out$6454){return basis$0List$1.map$332(function(v$6458){return v$6458[0];
},out$6454[0]);
};
compiler0$0OptLambda$1$12.getAttributes$6461 = function(n$6464){return n$6464[0][1][0];
};
compiler0$0OptLambda$1$12.setAttributes$6470 = function(n$6473,attr$6476){return (n$6473[0][1][0][0] = attr$6476,0);
};
compiler0$0OptLambda$1$12.getVisited$6477 = function(n$6480){return n$6480[0][1][0][0][4];
};
compiler0$0OptLambda$1$12.setVisited$6485 = function(n$6488,visited$6491){return (n$6488[0][1][0][0][4][0] = visited$6491,0);
};
compiler0$0OptLambda$1$12.getInEdges$6496 = function(n$6499){return n$6499[0][1][0][0][1];
};
compiler0$0OptLambda$1$12.setInEdges$6504 = function(n$6507,i$6510){return (n$6507[0][1][0][0][1][0] = i$6510,0);
};
compiler0$0OptLambda$1$12.getOutEdges$6515 = function(n$6518){return n$6518[0][1][0][0][2];
};
compiler0$0OptLambda$1$12.setOutEdges$6523 = function(n$6526,u$6529){return (n$6526[0][1][0][0][2][0] = u$6529,0);
};
compiler0$0OptLambda$1$12.getDfsNo$6534 = function(n$6537){return n$6537[0][1][0][0][0];
};
compiler0$0OptLambda$1$12.setDfsNo$6542 = function(n$6545,u$6548){return (n$6545[0][1][0][0][0][0] = u$6548,0);
};
compiler0$0OptLambda$1$12.getSccNo$6553 = function(n$6556){return n$6556[0][1][0][0][3];
};
compiler0$0OptLambda$1$12.setSccNo$6561 = function(n$6564,u$6567){return (n$6564[0][1][0][0][3][0] = u$6567,0);
};
compiler0$0OptLambda$1$12.mkGraph$6572 = function(v$6574){return [compiler0$0OptLambda$1$11.empty$4293(0)];
};
compiler0$0OptLambda$1$12.mkNode$6575 = function(i$6578){var t$7939;
var t$7936;
var v$6579 = [i$6578];
var v$6580 = [null];
var t$7938;
var t$7937;
var v$7134 = [false];
var v$7135 = [0];
var v$7136 = [0];
t$7937 = [[0],v$7135,v$7136,[0],v$7134];
t$7938 = [t$7937];
t$7936 = [t$7938,v$6579,v$6580];
t$7939 = [0,t$7936];
return [t$7939];
};
compiler0$0OptLambda$1$12.getInfoNode$6582 = function(n$6585){return n$6585[0][1][1];
};
compiler0$0OptLambda$1$12.setInfoNode$6591 = function(n$6594,i$6597){return (n$6594[0][1][1][0] = i$6597,0);
};
compiler0$0OptLambda$1$12.getNodeId$6603 = function(n$6606){return n$6606[0][1][1][0][0];
};
compiler0$0OptLambda$1$12.findNode$6607 = function(id$6610,g$6613){var v$6618 = compiler0$0OptLambda$1$11.lookup$4309(g$6613[0],id$6610);
switch (v$6618[0]) { case 0: {return v$6618[1];
 break; }default: {throw [compiler0$0OptLambda$1$12.en$DiGraphExn$6414,"DiGraph error in findNode: Node doesn't exist."];
} };
};
compiler0$0OptLambda$1$12.findNodeOpt$6621 = function(id$6624,g$6627){return compiler0$0OptLambda$1$11.lookup$4309(g$6627[0],id$6624);
};
compiler0$0OptLambda$1$12.addNode$6628 = function(n$6631,g$6634){switch ((compiler0$0OptLambda$1$11.lookup$4309(g$6634[0],n$6631[0][1][1][0][0]))[0]) { case 1: {return (g$6634[0] = (compiler0$0OptLambda$1$11.add$4569(n$6631[0][1][1][0][0],n$6631,g$6634[0])),0);
 break; }default: {throw [compiler0$0OptLambda$1$12.en$DiGraphExn$6414,"DiGraph error in addNode: Node allready exist."];
} };
};
compiler0$0OptLambda$1$12.addNodeWithUpdate$6639 = function(n$6642,g$6645){try {switch ((compiler0$0OptLambda$1$11.lookup$4309(g$6645[0],n$6642[0][1][1][0][0]))[0]) { case 1: {return (g$6645[0] = (compiler0$0OptLambda$1$11.add$4569(n$6642[0][1][1][0][0],n$6642,g$6645[0])),0);
 break; }default: {throw [compiler0$0OptLambda$1$12.en$DiGraphExn$6414,"DiGraph error in addNode: Node allready exist."];
} };
} catch(v$7940) {return (function(v$6648){var t$7941 = v$6648;
if (t$7941[0] == compiler0$0OptLambda$1$12.en$DiGraphExn$6414) {var n$7153;
var id$7159 = n$6642[0][1][1][0][0];
var v$7161 = compiler0$0OptLambda$1$11.lookup$4309(g$6645[0],id$7159);
switch (v$7161[0]) { case 0: {n$7153 = v$7161[1];
 break; }default: {throw [compiler0$0OptLambda$1$12.en$DiGraphExn$6414,"DiGraph error in findNode: Node doesn't exist."];
} };
var i$7154 = n$6642[0][1][1][0];
return (n$7153[0][1][1][0] = i$7154,0);
} else {throw v$6648;
};
})(v$7940);
};
};
compiler0$0OptLambda$1$12.findEdge$6649 = function(n1$6652,n2$6655){var v$6658 = n1$6652[0];
var v$6672 = v$6658[1];
var v$6673 = v$6672[2];
try {return (edlib$0edList$1.first$1115(function(v$6666){return v$6666[0] == n2$6655;
},v$6673[0]))[1];
} catch(v$7942) {return (function(v$6671){var t$7943 = v$6671;
if (t$7943[0] == edlib$0edList$1.en$First$1114) {throw [compiler0$0OptLambda$1$12.en$DiGraphExn$6414,"Digraph error in findEdge: Edge does not exist."];
} else {throw v$6671;
};
})(v$7942);
};
};
compiler0$0OptLambda$1$12.findEdgeOpt$6674 = function(n1$6677,n2$6680){var v$6683 = n1$6677[0];
var v$6697 = v$6683[1];
var v$6698 = v$6697[2];
try {return [0,(edlib$0edList$1.first$1115(function(v$6691){return v$6691[0] == n2$6680;
},v$6698[0]))[1]];
} catch(v$7944) {return (function(v$6696){var t$7945 = v$6696;
if (t$7945[0] == edlib$0edList$1.en$First$1114) {return [1];
} else {throw v$6696;
};
})(v$7944);
};
};
compiler0$0OptLambda$1$12.addEdge$6699 = function(n1$6702,n2$6705,info$6708){var v$6711 = n1$6702[0];
var v$6720 = v$6711[1];
var v$6721 = v$6720[2];
var t$7949;
var t$7948;
var fix$7946 = {};
fix$7946.$member = function(v$7884){lab$member: while (true) {if (v$7884 == null) {return false;
} else {var v$7885 = v$7884;
var v$7886 = v$7885[0];
var v$7887 = v$7885[1];
if (n2$6705 == v$7886) {return true;
} else {var t$7947 = v$7887;
var v$7884 = t$7947;
continue lab$member;
};
};
};
};
var member$7883 = fix$7946.$member;
t$7948 = (member$7883(basis$0List$1.map$332(function(v$7192){return v$7192[0];
},v$6721[0])));
t$7949 = (t$7948 == false);
if (t$7949) {(v$6721[0] = [[n2$6705,info$6708],v$6721[0]],0);
var u$7196 = SmlPrims.chk_ovf_i32(n1$6702[0][1][0][0][2][0] + 1);
(n1$6702[0][1][0][0][2][0] = u$7196,0);
var i$7203 = SmlPrims.chk_ovf_i32(n2$6705[0][1][0][0][1][0] + 1);
return (n2$6705[0][1][0][0][1][0] = i$7203,0);
} else {return 0;
};
};
compiler0$0OptLambda$1$12.addEdgeWithUpdate$6722 = function(n1$6725,n2$6728,info$6731){var v$6734 = n1$6725[0];
var v$6753 = v$6734[1];
var v$6754 = v$6753[2];
var t$7953;
var t$7952;
var fix$7950 = {};
fix$7950.$member = function(v$7893){lab$member: while (true) {if (v$7893 == null) {return false;
} else {var v$7894 = v$7893;
var v$7895 = v$7894[0];
var v$7896 = v$7894[1];
if (n2$6728 == v$7895) {return true;
} else {var t$7951 = v$7896;
var v$7893 = t$7951;
continue lab$member;
};
};
};
};
var member$7892 = fix$7950.$member;
t$7952 = (member$7892(basis$0List$1.map$332(function(v$7224){return v$7224[0];
},v$6754[0])));
t$7953 = (t$7952 == false);
if (t$7953) {(v$6754[0] = [[n2$6728,info$6731],v$6754[0]],0);
var u$7228 = SmlPrims.chk_ovf_i32(n1$6725[0][1][0][0][2][0] + 1);
(n1$6725[0][1][0][0][2][0] = u$7228,0);
var i$7235 = SmlPrims.chk_ovf_i32(n2$6728[0][1][0][0][1][0] + 1);
return (n2$6728[0][1][0][0][1][0] = i$7235,0);
} else {return (v$6754[0] = (basis$0List$1.map$332(function(v$6746){var v$6751 = v$6746[0];
var v$6752 = v$6746[1];
return (v$6751 == n2$6728)?[v$6751,info$6731]:[v$6751,v$6752];
},v$6754[0])),0);
};
};
compiler0$0OptLambda$1$12.rootNodes$6755 = function(g$6758){return compiler0$0OptLambda$1$11.fold$5038(function(v$7249){var v$7250 = v$7249[0];
var v$7251 = v$7249[1];
return (v$7250[0][1][0][0][1][0] == 0)?[v$7250,v$7251]:v$7251;
},null,g$6758[0]);
};
compiler0$0OptLambda$1$12.leafNodes$6770 = function(g$6773){return compiler0$0OptLambda$1$11.fold$5038(function(v$7255){var v$7256 = v$7255[0];
var v$7257 = v$7255[1];
return (v$7256[0][1][0][0][2][0] == 0)?[v$7256,v$7257]:v$7257;
},null,g$6773[0]);
};
compiler0$0OptLambda$1$12.succNodes$6785 = function(n$6788){var v$6791 = n$6788[0];
var v$6792 = v$6791[1];
var v$6793 = v$6792[2];
return basis$0List$1.map$332(function(v$7261){return v$7261[0];
},v$6793[0]);
};
compiler0$0OptLambda$1$12.predNodes$6794 = function(n$6797,g$6800){return compiler0$0OptLambda$1$11.fold$5038(function(v$7274){var v$7275 = v$7274[0];
var v$7276 = v$7274[1];
var v$7277 = v$7275[0];
var v$7278 = v$7277[1];
var v$7279 = v$7278[2];
var t$7956;
var fix$7954 = {};
fix$7954.$member = function(v$7291){lab$member: while (true) {if (v$7291 == null) {return false;
} else {var v$7292 = v$7291;
var v$7293 = v$7292[0];
var v$7294 = v$7292[1];
if (n$6797 == v$7293) {return true;
} else {var t$7955 = v$7294;
var v$7291 = t$7955;
continue lab$member;
};
};
};
};
var member$7290 = fix$7954.$member;
t$7956 = (member$7290(basis$0List$1.map$332(function(v$7288){return v$7288[0];
},v$7279[0])));
return t$7956?[v$7275,v$7276]:v$7276;
},null,g$6800[0]);
};
compiler0$0OptLambda$1$12.fold$6817 = function(f$6820,acc$6823,g$6826){return compiler0$0OptLambda$1$11.fold$5038(f$6820,acc$6823,g$6826[0]);
};
compiler0$0OptLambda$1$12.reachable$6827 = function(n$6830){var fix$7957 = {};
fix$7957.$reachable$ = function(v$6852,v$7932){var v$6853 = v$6852[0][1];
var v$6854 = v$6853[2];
if (v$6852[0][1][0][0][4][0] == false) {(v$6852[0][1][0][0][4][0] = true,0);
var t$7961;
var v$7902 = [v$6852,v$7932];
var fix$7962 = {};
fix$7962.$foldr = function(v$7904){if (v$7904 == null) {return v$7902;
} else {var v$7905 = v$7904;
var v$7906 = v$7905[0];
var v$7907 = v$7905[1];
var v$7909 = fix$7962.$foldr(v$7907);
return fix$7957.$reachable$(v$7906,v$7909);
};
};
var foldr$7903 = fix$7962.$foldr;
t$7961 = (function(v$7935){return foldr$7903(v$7935);
});
return t$7961(basis$0List$1.map$332(function(v$7325){return v$7325[0];
},v$6854[0]));
} else {return v$7932;
};
};
var reachable$$6831 = fix$7957.$reachable$;
var fix$7958 = {};
fix$7958.$SetVisitedFalse = function(node$6859){var v$6870 = node$6859[0][1];
var v$6871 = v$6870[2];
if (node$6859[0][1][0][0][4][0] == true) {(node$6859[0][1][0][0][4][0] = false,0);
var fix$7959 = {};
fix$7959.$app = function(v$7339){lab$app: while (true) {if (v$7339 == null) {return 0;
} else {var v$7340 = v$7339;
var v$7341 = v$7340[0];
var v$7342 = v$7340[1];
fix$7958.$SetVisitedFalse(v$7341);
var t$7960 = v$7342;
var v$7339 = t$7960;
continue lab$app;
};
};
};
var app$7338 = fix$7959.$app;
return app$7338(basis$0List$1.map$332(function(v$7344){return v$7344[0];
},v$6871[0]));
} else {return 0;
};
};
var SetVisitedFalse$6856 = fix$7958.$SetVisitedFalse;
return [reachable$$6831(n$6830,null),SetVisitedFalse$6856(n$6830)][0];
};
compiler0$0OptLambda$1$12.domGraph$6872 = function(g$6875){return compiler0$0OptLambda$1$11.dom$4909(g$6875[0]);
};
compiler0$0OptLambda$1$12.rangeGraph$6876 = function(g$6879){return compiler0$0OptLambda$1$11.range$4936(g$6879[0]);
};
compiler0$0OptLambda$1$12.layoutNode$6880 = function(layoutInfo$6883,n$6886){return [0,[null,[1],"",0,layoutInfo$6883(n$6886[0][1][1][0])]];
};
compiler0$0OptLambda$1$12.layoutGraph$6892 = function(layoutInfo$6895,layoutEdgeInfo$6898,layoutId$6901,rootNodes$6904){var fix$7963 = {};
fix$7963.$makeChildren = function(level$6909,node$6912){return basis$0List$1.map$332(function(v$6916){var v$6935 = v$6916[0];
var v$6936 = v$6916[1];
if (v$6935[0][1][0][0][4][0] == false) {(v$6935[0][1][0][0][4][0] = true,0);
var startStr$6923 = ((("   --" + (layoutId$6901(node$6912[0][1][1][0][0]))) + (layoutEdgeInfo$6898(v$6936))) + "-->   ") + (layoutInfo$6895(v$6935[0][1][1][0]));
var t$7975;
var v$6926 = startStr$6923.length;
t$7975 = [fix$7963.$makeChildren(SmlPrims.chk_ovf_i32(level$6909 + startStr$6923.length),v$6935),[1],";",v$6926,startStr$6923];
return [0,t$7975];
} else {var startStr$6929 = (((("   --" + (layoutId$6901(node$6912[0][1][1][0][0]))) + (layoutEdgeInfo$6898(v$6936))) + "-->   [*") + (layoutId$6901(v$6935[0][1][1][0][0]))) + "*]";
return [0,[[[1," "],null],[1],";",startStr$6929.length,startStr$6929]];
};
},node$6912[0][1][2][0]);
};
var makeChildren$6906 = fix$7963.$makeChildren;
var t$7974;
var t$7973;
var t$7972 = basis$0List$1.rev$257;
var t$7971;
var fix$7964 = {};
fix$7964.$foldl = function(v$7395,v$7396){lab$foldl: while (true) {if (v$7396 == null) {return v$7395;
} else {var v$7397 = v$7396;
var v$7398 = v$7397[0];
var v$7399 = v$7397[1];
var t$7965;
if (v$7398[0][1][0][0][4][0] == false) {(v$7398[0][1][0][0][4][0] = true,0);
var t$7968;
var t$7967;
var t$7966;
var v$7425 = layoutInfo$6895(v$7398[0][1][1][0]);
t$7966 = [makeChildren$6906(0,v$7398),[1],"",0,v$7425];
t$7967 = [0,t$7966];
t$7968 = [t$7967,v$7395];
t$7965 = t$7968;
} else {t$7965 = v$7395;
};
var t$7969 = t$7965;
var t$7970 = v$7399;
var v$7395 = t$7969;
var v$7396 = t$7970;
continue lab$foldl;
};
};
};
var foldl$7394 = fix$7964.$foldl;
var v$7933 = null;
t$7971 = (foldl$7394(v$7933,rootNodes$6904));
t$7973 = (t$7972(t$7971));
t$7974 = [t$7973,[1],"...Finishing layout of graph]",0,"[Starting layout of graph..."];
return [0,t$7974];
};
compiler0$0OptLambda$1$12.exportGraphVCG$6960 = function(title$6963,layoutInfo$6966,layoutEdgeInfo$6969,layoutId$6972,classes$6975,g$6978,out$6981){var attrGraph$7046 = (((((((((((("title: \"" + title$6963) + "\"") + "\n") + "splines: yes") + "\n") + "finetuning: no") + "\n") + "folding: 1") + "\n") + "orientation: left_to_right") + "\n") + "ignore_singles: yes") + "\n";
var range_g$7048 = compiler0$0OptLambda$1$11.range$4936(g$6978[0]);
basis$0TextIO$1.output$110(out$6981,"graph: {\n");
basis$0TextIO$1.output$110(out$6981,attrGraph$7046);
basis$0List$1.map$697(function(v$7581){var v$7582 = v$7581[0];
var v$7583 = v$7581[1];
return basis$0TextIO$1.output$110(out$6981,(((("classname " + (basis$0Int32$1.toString$458(v$7582))) + ":\"") + v$7583) + "\"") + "\n");
},classes$6975);
basis$0List$1.map$697(function(node$7589){var titleNode$7590 = ("title: \"" + (layoutId$6972(node$7589[0][1][1][0][0]))) + "\" ";
var labelNode$7593 = ("label: \"" + (layoutInfo$6966(node$7589[0][1][1][0]))) + "\" ";
return basis$0TextIO$1.output$110(out$6981,(("node: {" + titleNode$7590) + labelNode$7593) + "}\n");
},range_g$7048);
basis$0List$1.map$697(function(node$7601){var sourcename$7602 = ("sourcename: \"" + (layoutId$6972(node$7601[0][1][1][0][0]))) + "\" ";
return basis$0List$1.map$697(function(v$7607){var v$7608 = v$7607[0];
var v$7609 = v$7607[1];
return basis$0TextIO$1.output$110(out$6981,((((((("edge: {" + sourcename$7602) + (("targetname: \"" + (layoutId$6972(v$7608[0][1][1][0][0]))) + "\" ")) + "class: ") + "1 ") + "label: \" ") + (layoutEdgeInfo$6969(v$7609))) + "\"") + "}\n");
},node$7601[0][1][2][0]);
},range_g$7048);
basis$0List$1.map$697(function(v$7620){var v$7621 = v$7620[0];
var v$7622 = v$7620[1];
var v$7623 = v$7620[2];
var class$7624 = ("class: " + (basis$0Int32$1.toString$458(v$7621))) + " ";
var fix$7976 = {};
fix$7976.$app = function(v$7630){lab$app: while (true) {if (v$7630 == null) {return 0;
} else {var v$7631 = v$7630;
var v$7632 = v$7631[0];
var v$7633 = v$7631[1];
var v$7635 = v$7632[0];
var v$7636 = v$7632[1];
var t$7987 = basis$0TextIO$1.output$110;
var t$7986 = out$6981;
var t$7985;
var t$7984;
var t$7983 = (("edge: {" + (("sourcename: \"" + (layoutId$6972(v$7635[0][1][1][0][0]))) + "\" ")) + (("targetname: \"" + (layoutId$6972(v$7636[0][1][1][0][0]))) + "\" ")) + class$7624;
var t$7977;
var edgeInfo$7649;
var v$7650 = v$7635[0];
var v$7651 = v$7650[1];
var v$7652 = v$7651[2];
try {edgeInfo$7649 = (edlib$0edList$1.first$1115((function(env$7980){return function(v$7653){var v$7979 = env$7980[0];
return v$7653[0] == v$7979;
};
})([v$7636]),v$7652[0]))[1];
} catch(v$7978) {edgeInfo$7649 = (((function(env$7981){return function(v$7659){var t$7982 = v$7659;
if (t$7982[0] == edlib$0edList$1.en$First$1114) {throw [compiler0$0OptLambda$1$12.en$DiGraphExn$6414,"Digraph error in findEdge: Edge does not exist."];
} else {throw v$7659;
};
};
})([]))(v$7978));
};
t$7977 = (((("label: \"" + v$7622) + "(") + (layoutEdgeInfo$6969(edgeInfo$7649))) + ")\"");
t$7984 = (t$7983 + t$7977);
t$7985 = (t$7984 + "}\n");
t$7987(t$7986,t$7985);
var t$7988 = v$7633;
var v$7630 = t$7988;
continue lab$app;
};
};
};
var app$7629 = fix$7976.$app;
return app$7629(v$7623);
},classes$6975);
return basis$0TextIO$1.output$110(out$6981,"}\n");
};
return 0;
})();
