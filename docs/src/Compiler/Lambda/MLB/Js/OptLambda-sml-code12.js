if ((typeof(compiler0$0OptLambda$1$12)) == "undefined") {compiler0$0OptLambda$1$12 = {};
};
(function(){compiler0$0OptLambda$1$12.en$DiGraphExn$6362 = new String("DiGraphExn");
compiler0$0OptLambda$1$12.pp$6363 = function(t$6366){return tools$0PrettyPrint$1.flatten$936(tools$0PrettyPrint$1.format$937(tools$0Flags$1$1.colwidth$100[0],t$6366));
};
compiler0$0OptLambda$1$12.log$6367 = function(s$6370){return basis$0TextIO$1.output$110(tools$0Flags$1$1.log$101[0],s$6370 + "\n");
};
compiler0$0OptLambda$1$12.die$6371 = function(errmsg$6374){return tools$0Crash$1.impossible$59("IntDiGraph." + errmsg$6374);
};
compiler0$0OptLambda$1$12.footnote$6375 = function(v$7878,v$7879){return v$7878;
};
compiler0$0OptLambda$1$12.freshAttributes$6382 = function(v$6384){var v$6385 = [false];
var v$6386 = [0];
var v$6387 = [0];
return [[0],v$6386,v$6387,[0],v$6385];
};
compiler0$0OptLambda$1$12.getOutSet$6390 = function(n$6393){return n$6393[0][1][2];
};
compiler0$0OptLambda$1$12.getNodes$6399 = function(out$6402){return basis$0List$1.map$332(function(v$6406){return v$6406[0];
},out$6402[0]);
};
compiler0$0OptLambda$1$12.getAttributes$6409 = function(n$6412){return n$6412[0][1][0];
};
compiler0$0OptLambda$1$12.setAttributes$6418 = function(n$6421,attr$6424){return (n$6421[0][1][0][0] = attr$6424,0);
};
compiler0$0OptLambda$1$12.getVisited$6425 = function(n$6428){return n$6428[0][1][0][0][4];
};
compiler0$0OptLambda$1$12.setVisited$6433 = function(n$6436,visited$6439){return (n$6436[0][1][0][0][4][0] = visited$6439,0);
};
compiler0$0OptLambda$1$12.getInEdges$6444 = function(n$6447){return n$6447[0][1][0][0][1];
};
compiler0$0OptLambda$1$12.setInEdges$6452 = function(n$6455,i$6458){return (n$6455[0][1][0][0][1][0] = i$6458,0);
};
compiler0$0OptLambda$1$12.getOutEdges$6463 = function(n$6466){return n$6466[0][1][0][0][2];
};
compiler0$0OptLambda$1$12.setOutEdges$6471 = function(n$6474,u$6477){return (n$6474[0][1][0][0][2][0] = u$6477,0);
};
compiler0$0OptLambda$1$12.getDfsNo$6482 = function(n$6485){return n$6485[0][1][0][0][0];
};
compiler0$0OptLambda$1$12.setDfsNo$6490 = function(n$6493,u$6496){return (n$6493[0][1][0][0][0][0] = u$6496,0);
};
compiler0$0OptLambda$1$12.getSccNo$6501 = function(n$6504){return n$6504[0][1][0][0][3];
};
compiler0$0OptLambda$1$12.setSccNo$6509 = function(n$6512,u$6515){return (n$6512[0][1][0][0][3][0] = u$6515,0);
};
compiler0$0OptLambda$1$12.mkGraph$6520 = function(v$6522){return [compiler0$0OptLambda$1$11.empty$4267(0)];
};
compiler0$0OptLambda$1$12.mkNode$6523 = function(i$6526){var t$7887;
var t$7884;
var v$6527 = [i$6526];
var v$6528 = [null];
var t$7886;
var t$7885;
var v$7082 = [false];
var v$7083 = [0];
var v$7084 = [0];
t$7885 = [[0],v$7083,v$7084,[0],v$7082];
t$7886 = [t$7885];
t$7884 = [t$7886,v$6527,v$6528];
t$7887 = [0,t$7884];
return [t$7887];
};
compiler0$0OptLambda$1$12.getInfoNode$6530 = function(n$6533){return n$6533[0][1][1];
};
compiler0$0OptLambda$1$12.setInfoNode$6539 = function(n$6542,i$6545){return (n$6542[0][1][1][0] = i$6545,0);
};
compiler0$0OptLambda$1$12.getNodeId$6551 = function(n$6554){return n$6554[0][1][1][0][0];
};
compiler0$0OptLambda$1$12.findNode$6555 = function(id$6558,g$6561){var v$6566 = compiler0$0OptLambda$1$11.lookup$4283(g$6561[0],id$6558);
switch (v$6566[0]) { case 0: {return v$6566[1];
 break; }default: {throw [compiler0$0OptLambda$1$12.en$DiGraphExn$6362,"DiGraph error in findNode: Node doesn't exist."];
} };
};
compiler0$0OptLambda$1$12.findNodeOpt$6569 = function(id$6572,g$6575){return compiler0$0OptLambda$1$11.lookup$4283(g$6575[0],id$6572);
};
compiler0$0OptLambda$1$12.addNode$6576 = function(n$6579,g$6582){switch ((compiler0$0OptLambda$1$11.lookup$4283(g$6582[0],n$6579[0][1][1][0][0]))[0]) { case 1: {return (g$6582[0] = (compiler0$0OptLambda$1$11.add$4543(n$6579[0][1][1][0][0],n$6579,g$6582[0])),0);
 break; }default: {throw [compiler0$0OptLambda$1$12.en$DiGraphExn$6362,"DiGraph error in addNode: Node allready exist."];
} };
};
compiler0$0OptLambda$1$12.addNodeWithUpdate$6587 = function(n$6590,g$6593){try {switch ((compiler0$0OptLambda$1$11.lookup$4283(g$6593[0],n$6590[0][1][1][0][0]))[0]) { case 1: {return (g$6593[0] = (compiler0$0OptLambda$1$11.add$4543(n$6590[0][1][1][0][0],n$6590,g$6593[0])),0);
 break; }default: {throw [compiler0$0OptLambda$1$12.en$DiGraphExn$6362,"DiGraph error in addNode: Node allready exist."];
} };
} catch(v$7888) {return (function(v$6596){var t$7889 = v$6596;
if (t$7889[0] == compiler0$0OptLambda$1$12.en$DiGraphExn$6362) {var n$7101;
var id$7107 = n$6590[0][1][1][0][0];
var v$7109 = compiler0$0OptLambda$1$11.lookup$4283(g$6593[0],id$7107);
switch (v$7109[0]) { case 0: {n$7101 = v$7109[1];
 break; }default: {throw [compiler0$0OptLambda$1$12.en$DiGraphExn$6362,"DiGraph error in findNode: Node doesn't exist."];
} };
var i$7102 = n$6590[0][1][1][0];
return (n$7101[0][1][1][0] = i$7102,0);
} else {throw v$6596;
};
})(v$7888);
};
};
compiler0$0OptLambda$1$12.findEdge$6597 = function(n1$6600,n2$6603){var v$6606 = n1$6600[0];
var v$6620 = v$6606[1];
var v$6621 = v$6620[2];
try {return (edlib$0edList$1.first$1115(function(v$6614){return v$6614[0] == n2$6603;
},v$6621[0]))[1];
} catch(v$7890) {return (function(v$6619){var t$7891 = v$6619;
if (t$7891[0] == edlib$0edList$1.en$First$1114) {throw [compiler0$0OptLambda$1$12.en$DiGraphExn$6362,"Digraph error in findEdge: Edge does not exist."];
} else {throw v$6619;
};
})(v$7890);
};
};
compiler0$0OptLambda$1$12.findEdgeOpt$6622 = function(n1$6625,n2$6628){var v$6631 = n1$6625[0];
var v$6645 = v$6631[1];
var v$6646 = v$6645[2];
try {return [0,(edlib$0edList$1.first$1115(function(v$6639){return v$6639[0] == n2$6628;
},v$6646[0]))[1]];
} catch(v$7892) {return (function(v$6644){var t$7893 = v$6644;
if (t$7893[0] == edlib$0edList$1.en$First$1114) {return [1];
} else {throw v$6644;
};
})(v$7892);
};
};
compiler0$0OptLambda$1$12.addEdge$6647 = function(n1$6650,n2$6653,info$6656){var v$6659 = n1$6650[0];
var v$6668 = v$6659[1];
var v$6669 = v$6668[2];
var t$7897;
var t$7896;
var fix$7894 = {};
fix$7894.$member = function(v$7832){lab$member: while (true) {if (v$7832 == null) {return false;
} else {var v$7833 = v$7832;
var v$7834 = v$7833[0];
var v$7835 = v$7833[1];
if (n2$6653 == v$7834) {return true;
} else {var t$7895 = v$7835;
var v$7832 = t$7895;
continue lab$member;
};
};
};
};
var member$7831 = fix$7894.$member;
t$7896 = (member$7831(basis$0List$1.map$332(function(v$7140){return v$7140[0];
},v$6669[0])));
t$7897 = (t$7896 == false);
if (t$7897) {(v$6669[0] = [[n2$6653,info$6656],v$6669[0]],0);
var u$7144 = SmlPrims.chk_ovf_i32(n1$6650[0][1][0][0][2][0] + 1);
(n1$6650[0][1][0][0][2][0] = u$7144,0);
var i$7151 = SmlPrims.chk_ovf_i32(n2$6653[0][1][0][0][1][0] + 1);
return (n2$6653[0][1][0][0][1][0] = i$7151,0);
} else {return 0;
};
};
compiler0$0OptLambda$1$12.addEdgeWithUpdate$6670 = function(n1$6673,n2$6676,info$6679){var v$6682 = n1$6673[0];
var v$6701 = v$6682[1];
var v$6702 = v$6701[2];
var t$7901;
var t$7900;
var fix$7898 = {};
fix$7898.$member = function(v$7841){lab$member: while (true) {if (v$7841 == null) {return false;
} else {var v$7842 = v$7841;
var v$7843 = v$7842[0];
var v$7844 = v$7842[1];
if (n2$6676 == v$7843) {return true;
} else {var t$7899 = v$7844;
var v$7841 = t$7899;
continue lab$member;
};
};
};
};
var member$7840 = fix$7898.$member;
t$7900 = (member$7840(basis$0List$1.map$332(function(v$7172){return v$7172[0];
},v$6702[0])));
t$7901 = (t$7900 == false);
if (t$7901) {(v$6702[0] = [[n2$6676,info$6679],v$6702[0]],0);
var u$7176 = SmlPrims.chk_ovf_i32(n1$6673[0][1][0][0][2][0] + 1);
(n1$6673[0][1][0][0][2][0] = u$7176,0);
var i$7183 = SmlPrims.chk_ovf_i32(n2$6676[0][1][0][0][1][0] + 1);
return (n2$6676[0][1][0][0][1][0] = i$7183,0);
} else {return (v$6702[0] = (basis$0List$1.map$332(function(v$6694){var v$6699 = v$6694[0];
var v$6700 = v$6694[1];
return (v$6699 == n2$6676)?[v$6699,info$6679]:[v$6699,v$6700];
},v$6702[0])),0);
};
};
compiler0$0OptLambda$1$12.rootNodes$6703 = function(g$6706){return compiler0$0OptLambda$1$11.fold$5012(function(v$7197){var v$7198 = v$7197[0];
var v$7199 = v$7197[1];
return (v$7198[0][1][0][0][1][0] == 0)?[v$7198,v$7199]:v$7199;
},null,g$6706[0]);
};
compiler0$0OptLambda$1$12.leafNodes$6718 = function(g$6721){return compiler0$0OptLambda$1$11.fold$5012(function(v$7203){var v$7204 = v$7203[0];
var v$7205 = v$7203[1];
return (v$7204[0][1][0][0][2][0] == 0)?[v$7204,v$7205]:v$7205;
},null,g$6721[0]);
};
compiler0$0OptLambda$1$12.succNodes$6733 = function(n$6736){var v$6739 = n$6736[0];
var v$6740 = v$6739[1];
var v$6741 = v$6740[2];
return basis$0List$1.map$332(function(v$7209){return v$7209[0];
},v$6741[0]);
};
compiler0$0OptLambda$1$12.predNodes$6742 = function(n$6745,g$6748){return compiler0$0OptLambda$1$11.fold$5012(function(v$7222){var v$7223 = v$7222[0];
var v$7224 = v$7222[1];
var v$7225 = v$7223[0];
var v$7226 = v$7225[1];
var v$7227 = v$7226[2];
var t$7904;
var fix$7902 = {};
fix$7902.$member = function(v$7239){lab$member: while (true) {if (v$7239 == null) {return false;
} else {var v$7240 = v$7239;
var v$7241 = v$7240[0];
var v$7242 = v$7240[1];
if (n$6745 == v$7241) {return true;
} else {var t$7903 = v$7242;
var v$7239 = t$7903;
continue lab$member;
};
};
};
};
var member$7238 = fix$7902.$member;
t$7904 = (member$7238(basis$0List$1.map$332(function(v$7236){return v$7236[0];
},v$7227[0])));
return t$7904?[v$7223,v$7224]:v$7224;
},null,g$6748[0]);
};
compiler0$0OptLambda$1$12.fold$6765 = function(f$6768,acc$6771,g$6774){return compiler0$0OptLambda$1$11.fold$5012(f$6768,acc$6771,g$6774[0]);
};
compiler0$0OptLambda$1$12.reachable$6775 = function(n$6778){var fix$7905 = {};
fix$7905.$reachable$ = function(v$6800,v$7880){var v$6801 = v$6800[0][1];
var v$6802 = v$6801[2];
if (v$6800[0][1][0][0][4][0] == false) {(v$6800[0][1][0][0][4][0] = true,0);
var t$7909;
var v$7850 = [v$6800,v$7880];
var fix$7910 = {};
fix$7910.$foldr = function(v$7852){if (v$7852 == null) {return v$7850;
} else {var v$7853 = v$7852;
var v$7854 = v$7853[0];
var v$7855 = v$7853[1];
var v$7857 = fix$7910.$foldr(v$7855);
return fix$7905.$reachable$(v$7854,v$7857);
};
};
var foldr$7851 = fix$7910.$foldr;
t$7909 = (function(v$7883){return foldr$7851(v$7883);
});
return t$7909(basis$0List$1.map$332(function(v$7273){return v$7273[0];
},v$6802[0]));
} else {return v$7880;
};
};
var reachable$$6779 = fix$7905.$reachable$;
var fix$7906 = {};
fix$7906.$SetVisitedFalse = function(node$6807){var v$6818 = node$6807[0][1];
var v$6819 = v$6818[2];
if (node$6807[0][1][0][0][4][0] == true) {(node$6807[0][1][0][0][4][0] = false,0);
var fix$7907 = {};
fix$7907.$app = function(v$7287){lab$app: while (true) {if (v$7287 == null) {return 0;
} else {var v$7288 = v$7287;
var v$7289 = v$7288[0];
var v$7290 = v$7288[1];
fix$7906.$SetVisitedFalse(v$7289);
var t$7908 = v$7290;
var v$7287 = t$7908;
continue lab$app;
};
};
};
var app$7286 = fix$7907.$app;
return app$7286(basis$0List$1.map$332(function(v$7292){return v$7292[0];
},v$6819[0]));
} else {return 0;
};
};
var SetVisitedFalse$6804 = fix$7906.$SetVisitedFalse;
return [reachable$$6779(n$6778,null),SetVisitedFalse$6804(n$6778)][0];
};
compiler0$0OptLambda$1$12.domGraph$6820 = function(g$6823){return compiler0$0OptLambda$1$11.dom$4883(g$6823[0]);
};
compiler0$0OptLambda$1$12.rangeGraph$6824 = function(g$6827){return compiler0$0OptLambda$1$11.range$4910(g$6827[0]);
};
compiler0$0OptLambda$1$12.layoutNode$6828 = function(layoutInfo$6831,n$6834){return [0,[null,[1],"",0,layoutInfo$6831(n$6834[0][1][1][0])]];
};
compiler0$0OptLambda$1$12.layoutGraph$6840 = function(layoutInfo$6843,layoutEdgeInfo$6846,layoutId$6849,rootNodes$6852){var fix$7911 = {};
fix$7911.$makeChildren = function(level$6857,node$6860){return basis$0List$1.map$332(function(v$6864){var v$6883 = v$6864[0];
var v$6884 = v$6864[1];
if (v$6883[0][1][0][0][4][0] == false) {(v$6883[0][1][0][0][4][0] = true,0);
var startStr$6871 = ((("   --" + (layoutId$6849(node$6860[0][1][1][0][0]))) + (layoutEdgeInfo$6846(v$6884))) + "-->   ") + (layoutInfo$6843(v$6883[0][1][1][0]));
var t$7923;
var v$6874 = startStr$6871.length;
t$7923 = [fix$7911.$makeChildren(SmlPrims.chk_ovf_i32(level$6857 + startStr$6871.length),v$6883),[1],";",v$6874,startStr$6871];
return [0,t$7923];
} else {var startStr$6877 = (((("   --" + (layoutId$6849(node$6860[0][1][1][0][0]))) + (layoutEdgeInfo$6846(v$6884))) + "-->   [*") + (layoutId$6849(v$6883[0][1][1][0][0]))) + "*]";
return [0,[[[1," "],null],[1],";",startStr$6877.length,startStr$6877]];
};
},node$6860[0][1][2][0]);
};
var makeChildren$6854 = fix$7911.$makeChildren;
var t$7922;
var t$7921;
var t$7920 = basis$0List$1.rev$257;
var t$7919;
var fix$7912 = {};
fix$7912.$foldl = function(v$7343,v$7344){lab$foldl: while (true) {if (v$7344 == null) {return v$7343;
} else {var v$7345 = v$7344;
var v$7346 = v$7345[0];
var v$7347 = v$7345[1];
var t$7913;
if (v$7346[0][1][0][0][4][0] == false) {(v$7346[0][1][0][0][4][0] = true,0);
var t$7916;
var t$7915;
var t$7914;
var v$7373 = layoutInfo$6843(v$7346[0][1][1][0]);
t$7914 = [makeChildren$6854(0,v$7346),[1],"",0,v$7373];
t$7915 = [0,t$7914];
t$7916 = [t$7915,v$7343];
t$7913 = t$7916;
} else {t$7913 = v$7343;
};
var t$7917 = t$7913;
var t$7918 = v$7347;
var v$7343 = t$7917;
var v$7344 = t$7918;
continue lab$foldl;
};
};
};
var foldl$7342 = fix$7912.$foldl;
var v$7881 = null;
t$7919 = (foldl$7342(v$7881,rootNodes$6852));
t$7921 = (t$7920(t$7919));
t$7922 = [t$7921,[1],"...Finishing layout of graph]",0,"[Starting layout of graph..."];
return [0,t$7922];
};
compiler0$0OptLambda$1$12.exportGraphVCG$6908 = function(title$6911,layoutInfo$6914,layoutEdgeInfo$6917,layoutId$6920,classes$6923,g$6926,out$6929){var attrGraph$6994 = (((((((((((("title: \"" + title$6911) + "\"") + "\n") + "splines: yes") + "\n") + "finetuning: no") + "\n") + "folding: 1") + "\n") + "orientation: left_to_right") + "\n") + "ignore_singles: yes") + "\n";
var range_g$6996 = compiler0$0OptLambda$1$11.range$4910(g$6926[0]);
basis$0TextIO$1.output$110(out$6929,"graph: {\n");
basis$0TextIO$1.output$110(out$6929,attrGraph$6994);
basis$0List$1.map$697(function(v$7529){var v$7530 = v$7529[0];
var v$7531 = v$7529[1];
return basis$0TextIO$1.output$110(out$6929,(((("classname " + (basis$0Int32$1.toString$458(v$7530))) + ":\"") + v$7531) + "\"") + "\n");
},classes$6923);
basis$0List$1.map$697(function(node$7537){var titleNode$7538 = ("title: \"" + (layoutId$6920(node$7537[0][1][1][0][0]))) + "\" ";
var labelNode$7541 = ("label: \"" + (layoutInfo$6914(node$7537[0][1][1][0]))) + "\" ";
return basis$0TextIO$1.output$110(out$6929,(("node: {" + titleNode$7538) + labelNode$7541) + "}\n");
},range_g$6996);
basis$0List$1.map$697(function(node$7549){var sourcename$7550 = ("sourcename: \"" + (layoutId$6920(node$7549[0][1][1][0][0]))) + "\" ";
return basis$0List$1.map$697(function(v$7555){var v$7556 = v$7555[0];
var v$7557 = v$7555[1];
return basis$0TextIO$1.output$110(out$6929,((((((("edge: {" + sourcename$7550) + (("targetname: \"" + (layoutId$6920(v$7556[0][1][1][0][0]))) + "\" ")) + "class: ") + "1 ") + "label: \" ") + (layoutEdgeInfo$6917(v$7557))) + "\"") + "}\n");
},node$7549[0][1][2][0]);
},range_g$6996);
basis$0List$1.map$697(function(v$7568){var v$7569 = v$7568[0];
var v$7570 = v$7568[1];
var v$7571 = v$7568[2];
var class$7572 = ("class: " + (basis$0Int32$1.toString$458(v$7569))) + " ";
var fix$7924 = {};
fix$7924.$app = function(v$7578){lab$app: while (true) {if (v$7578 == null) {return 0;
} else {var v$7579 = v$7578;
var v$7580 = v$7579[0];
var v$7581 = v$7579[1];
var v$7583 = v$7580[0];
var v$7584 = v$7580[1];
var t$7935 = basis$0TextIO$1.output$110;
var t$7934 = out$6929;
var t$7933;
var t$7932;
var t$7931 = (("edge: {" + (("sourcename: \"" + (layoutId$6920(v$7583[0][1][1][0][0]))) + "\" ")) + (("targetname: \"" + (layoutId$6920(v$7584[0][1][1][0][0]))) + "\" ")) + class$7572;
var t$7925;
var edgeInfo$7597;
var v$7598 = v$7583[0];
var v$7599 = v$7598[1];
var v$7600 = v$7599[2];
try {edgeInfo$7597 = (edlib$0edList$1.first$1115((function(env$7928){return function(v$7601){var v$7927 = env$7928[0];
return v$7601[0] == v$7927;
};
})([v$7584]),v$7600[0]))[1];
} catch(v$7926) {edgeInfo$7597 = (((function(env$7929){return function(v$7607){var t$7930 = v$7607;
if (t$7930[0] == edlib$0edList$1.en$First$1114) {throw [compiler0$0OptLambda$1$12.en$DiGraphExn$6362,"Digraph error in findEdge: Edge does not exist."];
} else {throw v$7607;
};
};
})([]))(v$7926));
};
t$7925 = (((("label: \"" + v$7570) + "(") + (layoutEdgeInfo$6917(edgeInfo$7597))) + ")\"");
t$7932 = (t$7931 + t$7925);
t$7933 = (t$7932 + "}\n");
t$7935(t$7934,t$7933);
var t$7936 = v$7581;
var v$7578 = t$7936;
continue lab$app;
};
};
};
var app$7577 = fix$7924.$app;
return app$7577(v$7571);
},classes$6923);
return basis$0TextIO$1.output$110(out$6929,"}\n");
};
return 0;
})();
