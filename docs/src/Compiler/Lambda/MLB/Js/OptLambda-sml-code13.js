if ((typeof(compiler0$0OptLambda$1$13)) == "undefined") {compiler0$0OptLambda$1$13 = {};
};
(function(){compiler0$0OptLambda$1$13.scc$7989 = function(g$7992){var scc$7993 = [null];
var nodeStack$8000 = [null];
var dfsNo$8023 = [0];
var fix$8710 = {};
fix$8710.$makeSCC = function(n$8035){lab$makeSCC: while (true) {var n$$8036;
var v$8303 = nodeStack$8000[0];
if (v$8303 == null) {throw [compiler0$0OptLambda$1$6.en$DiGraphExn$2526,"DiGraph error in scc -- popNode.\n"];
} else {var v$8304 = v$8303;
var v$8305 = v$8304[0];
var v$8306 = v$8304[1];
(nodeStack$8000[0] = v$8306,0);
n$$8036 = v$8305;
};
(scc$7993[0] = [[n$$8036,basis$0List$1.hd$676(scc$7993[0])],basis$0List$1.tl$677(scc$7993[0])],0);
compiler0$0OptLambda$1$6.setDfsNo$2654(n$$8036,0);
if ((n$8035 == n$$8036)?false:true) {var t$8711 = n$8035;
var n$8035 = t$8711;
continue lab$makeSCC;
} else {return 0;
};
};
};
var makeSCC$8032 = fix$8710.$makeSCC;
var fix$8712 = {};
fix$8712.$processNode = function(n$8048){var low$8049;
(dfsNo$8023[0] = (SmlPrims.chk_ovf_i32(dfsNo$8023[0] + 1)),0);
low$8049 = dfsNo$8023[0];
compiler0$0OptLambda$1$6.setDfsNo$2654(n$8048,low$8049);
compiler0$0OptLambda$1$6.setVisited$2597(n$8048,true);
(nodeStack$8000[0] = [n$8048,nodeStack$8000[0]],0);
var low$8050;
var fix$8722 = {};
fix$8722.$foldl = function(v$8329,v$8330){lab$foldl: while (true) {if (v$8330 == null) {return v$8329;
} else {var v$8331 = v$8330;
var v$8332 = v$8331[0];
var v$8333 = v$8331[1];
var t$8724;
if ((compiler0$0OptLambda$1$6.getVisited$2589(v$8332))[0]) {var t$8723;
var v$8604 = (compiler0$0OptLambda$1$6.getDfsNo$2646(v$8332))[0];
t$8723 = ((v$8604 == 0)?false:true);
if (t$8723) {var v$8608 = (compiler0$0OptLambda$1$6.getDfsNo$2646(v$8332))[0];
t$8724 = ((v$8608 < v$8329)?v$8608:v$8329);
} else {t$8724 = v$8329;
};
} else {var v$8610 = fix$8712.$processNode(v$8332);
t$8724 = ((v$8610 < v$8329)?v$8610:v$8329);
};
var t$8725 = t$8724;
var t$8726 = v$8333;
var v$8329 = t$8725;
var v$8330 = t$8726;
continue lab$foldl;
};
};
};
var foldl$8328 = fix$8722.$foldl;
var v$8705 = compiler0$0OptLambda$1$6.getNodes$2563(compiler0$0OptLambda$1$6.getOutSet$2554(n$8048));
low$8050 = (foldl$8328(low$8049,v$8705));
if ((compiler0$0OptLambda$1$6.getDfsNo$2646(n$8048))[0] == low$8050) {(scc$7993[0] = [null,scc$7993[0]],0);
makeSCC$8032(n$8048);
} else {0;
};
return low$8050;
};
var processNode$8045 = fix$8712.$processNode;
(dfsNo$8023[0] = 0,0);
(nodeStack$8000[0] = null,0);
(scc$7993[0] = null,0);
var fix$8713 = {};
fix$8713.$app = function(v$8376){lab$app: while (true) {if (v$8376 == null) {return 0;
} else {var v$8377 = v$8376;
var v$8378 = v$8377[0];
var v$8379 = v$8377[1];
compiler0$0OptLambda$1$6.setVisited$2597(v$8378,false);
compiler0$0OptLambda$1$6.setDfsNo$2654(v$8378,0);
var t$8714 = v$8379;
var v$8376 = t$8714;
continue lab$app;
};
};
};
var app$8375 = fix$8713.$app;
app$8375(compiler0$0OptLambda$1$6.rangeGraph$2988(g$7992));
var fix$8715 = {};
fix$8715.$app = function(v$8388){lab$app: while (true) {if (v$8388 == null) {return 0;
} else {var v$8389 = v$8388;
var v$8390 = v$8389[0];
var v$8391 = v$8389[1];
if ((compiler0$0OptLambda$1$6.getVisited$2589(v$8390))[0] == false) {processNode$8045(v$8390);
0;
} else {0;
};
var t$8716 = v$8391;
var v$8388 = t$8716;
continue lab$app;
};
};
};
var app$8387 = fix$8715.$app;
app$8387(compiler0$0OptLambda$1$6.rangeGraph$2988(g$7992));
var t$8721;
var t$8720 = basis$0List$1.rev$257(scc$7993[0]);
var t$8719;
var fix$8717 = {};
fix$8717.$app = function(v$8411){lab$app: while (true) {if (v$8411 == null) {return 0;
} else {var v$8412 = v$8411;
var v$8413 = v$8412[0];
var v$8414 = v$8412[1];
compiler0$0OptLambda$1$6.setVisited$2597(v$8413,false);
compiler0$0OptLambda$1$6.setDfsNo$2654(v$8413,0);
var t$8718 = v$8414;
var v$8411 = t$8718;
continue lab$app;
};
};
};
var app$8410 = fix$8717.$app;
t$8719 = (app$8410(compiler0$0OptLambda$1$6.rangeGraph$2988(g$7992)));
t$8721 = [t$8720,t$8719];
return t$8721[0];
};
compiler0$0OptLambda$1$13.genSccGraph$8102 = function(g$8105){var sccs$8106 = compiler0$0OptLambda$1$13.scc$7989(g$8105);
var sccGraph$8107 = compiler0$0OptLambda$1$12.mkGraph$6572(0);
var fix$8727 = {};
fix$8727.$foldl = function(v$8433,v$8434){lab$foldl: while (true) {if (v$8434 == null) {return v$8433;
} else {var v$8435 = v$8434;
var v$8436 = v$8435[0];
var v$8437 = v$8435[1];
var t$8728;
compiler0$0OptLambda$1$12.addNode$6628(compiler0$0OptLambda$1$12.mkNode$6575([v$8433,v$8436]),sccGraph$8107);
var fix$8729 = {};
fix$8729.$app = function(v$8451){lab$app: while (true) {if (v$8451 == null) {return 0;
} else {var v$8452 = v$8451;
var v$8453 = v$8452[0];
var v$8454 = v$8452[1];
compiler0$0OptLambda$1$6.setSccNo$2673(v$8453,v$8433);
var t$8730 = v$8454;
var v$8451 = t$8730;
continue lab$app;
};
};
};
var app$8450 = fix$8729.$app;
app$8450(v$8436);
t$8728 = (SmlPrims.chk_ovf_i32(v$8433 + 1));
var t$8731 = t$8728;
var t$8732 = v$8437;
var v$8433 = t$8731;
var v$8434 = t$8732;
continue lab$foldl;
};
};
};
var foldl$8432 = fix$8727.$foldl;
foldl$8432(1,sccs$8106);
var fix$8733 = {};
fix$8733.$app = function(v$8464){lab$app: while (true) {if (v$8464 == null) {return 0;
} else {var v$8465 = v$8464;
var v$8466 = v$8465[0];
var v$8467 = v$8465[1];
var fix$8734 = {};
fix$8734.$app = function(v$8520){lab$app: while (true) {if (v$8520 == null) {return 0;
} else {var v$8521 = v$8520;
var v$8522 = v$8521[0];
var v$8523 = v$8521[1];
var fix$8735 = {};
fix$8735.$app = function(v$8526){lab$app: while (true) {if (v$8526 == null) {return 0;
} else {var v$8527 = v$8526;
var v$8528 = v$8527[0];
var v$8529 = v$8527[1];
var sccNode1$8530 = compiler0$0OptLambda$1$12.findNode$6607((compiler0$0OptLambda$1$6.getSccNo$2665(v$8522))[0],sccGraph$8107);
var sccNode2$8531 = compiler0$0OptLambda$1$12.findNode$6607((compiler0$0OptLambda$1$6.getSccNo$2665(v$8528))[0],sccGraph$8107);
((sccNode1$8530 == sccNode2$8531)?false:true)?(compiler0$0OptLambda$1$12.addEdge$6699(sccNode1$8530,sccNode2$8531,0)):0;
var t$8736 = v$8529;
var v$8526 = t$8736;
continue lab$app;
};
};
};
var app$8525 = fix$8735.$app;
app$8525(compiler0$0OptLambda$1$6.getNodes$2563(compiler0$0OptLambda$1$6.getOutSet$2554(v$8522)));
var t$8737 = v$8523;
var v$8520 = t$8737;
continue lab$app;
};
};
};
var app$8519 = fix$8734.$app;
app$8519(v$8466);
var t$8738 = v$8467;
var v$8464 = t$8738;
continue lab$app;
};
};
};
var app$8463 = fix$8733.$app;
app$8463(sccs$8106);
return sccGraph$8107;
};
compiler0$0OptLambda$1$13.layoutSccNo$8147 = function(sccNo$8150){return "sccNo " + (basis$0Int32$1.toString$458(sccNo$8150));
};
compiler0$0OptLambda$1$13.layoutComponent$8151 = function(layoutId$8154,v$8158){var v$8165 = v$8158[0];
var v$8166 = v$8158[1];
var t$8741 = ("[" + ("sccNo " + (basis$0Int32$1.toString$458(v$8165)))) + ": ";
var t$8740;
var fix$8739 = {};
fix$8739.$foldr = function(v$8657){if (v$8657 == null) {return "]";
} else {var v$8658 = v$8657;
var v$8659 = v$8658[0];
var v$8660 = v$8658[1];
var v$8662 = fix$8739.$foldr(v$8660);
return ((layoutId$8154(compiler0$0OptLambda$1$6.getNodeId$2715(v$8659))) + ",") + v$8662;
};
};
var foldr$8656 = fix$8739.$foldr;
t$8740 = (foldr$8656(v$8166));
return t$8741 + t$8740;
};
compiler0$0OptLambda$1$13.layoutEdge$8167 = function(NO_EDGE_INFO$8169){return "";
};
compiler0$0OptLambda$1$13.layoutScc$8170 = function(layoutId$8173,sccG$8176){return compiler0$0OptLambda$1$12.layoutGraph$6892(function(v$8670){var v$8671 = v$8670[0];
var v$8672 = v$8670[1];
var t$8744 = ("[" + ("sccNo " + (basis$0Int32$1.toString$458(v$8671)))) + ": ";
var t$8743;
var fix$8742 = {};
fix$8742.$foldr = function(v$8674){if (v$8674 == null) {return "]";
} else {var v$8675 = v$8674;
var v$8676 = v$8675[0];
var v$8677 = v$8675[1];
var v$8678 = fix$8742.$foldr(v$8677);
return ((layoutId$8173(compiler0$0OptLambda$1$6.getNodeId$2715(v$8676))) + ",") + v$8678;
};
};
var foldr$8673 = fix$8742.$foldr;
t$8743 = (foldr$8673(v$8672));
return t$8744 + t$8743;
},function(NO_EDGE_INFO$8561){return "";
},function(sccNo$8562){return "sccNo " + (basis$0Int32$1.toString$458(sccNo$8562));
},compiler0$0OptLambda$1$12.rootNodes$6755(sccG$8176));
};
compiler0$0OptLambda$1$13.exportSccVCG$8177 = function(title$8180,layoutId$8183,sccG$8186,stream$8189){return compiler0$0OptLambda$1$12.exportGraphVCG$6960(title$8180,function(v$8680){var v$8681 = v$8680[0];
var v$8682 = v$8680[1];
var t$8747 = ("[" + ("sccNo " + (basis$0Int32$1.toString$458(v$8681)))) + ": ";
var t$8746;
var fix$8745 = {};
fix$8745.$foldr = function(v$8684){if (v$8684 == null) {return "]";
} else {var v$8685 = v$8684;
var v$8686 = v$8685[0];
var v$8687 = v$8685[1];
var v$8688 = fix$8745.$foldr(v$8687);
return ((layoutId$8183(compiler0$0OptLambda$1$6.getNodeId$2715(v$8686))) + ",") + v$8688;
};
};
var foldr$8683 = fix$8745.$foldr;
t$8746 = (foldr$8683(v$8682));
return t$8747 + t$8746;
},function(NO_EDGE_INFO$8564){return "";
},function(sccNo$8565){return "sccNo " + (basis$0Int32$1.toString$458(sccNo$8565));
},null,sccG$8186,stream$8189);
};
compiler0$0OptLambda$1$13.pathsBetweenTwoNodes$8190 = function(node1$8193,node2$8196,sccG$8199){var sccNode1$8200 = compiler0$0OptLambda$1$12.findNode$6607((compiler0$0OptLambda$1$6.getSccNo$2665(node1$8193))[0],sccG$8199);
var sccNode2$8201 = compiler0$0OptLambda$1$12.findNode$6607((compiler0$0OptLambda$1$6.getSccNo$2665(node2$8196))[0],sccG$8199);
var fix$8748 = {};
fix$8748.$findPath = function(curSccNode$8205,sccNode2$8208,path$8211,paths$8214){if (curSccNode$8205 == sccNode2$8208) {return [basis$0List$1.rev$257([curSccNode$8205,path$8211]),paths$8214];
} else {var fix$8749 = {};
fix$8749.$foldl = function(v$8580,v$8581){lab$foldl: while (true) {if (v$8581 == null) {return v$8580;
} else {var v$8582 = v$8581;
var v$8583 = v$8582[0];
var v$8584 = v$8582[1];
var t$8750 = fix$8748.$findPath(v$8583,sccNode2$8208,[curSccNode$8205,path$8211],v$8580);
var t$8751 = v$8584;
var v$8580 = t$8750;
var v$8581 = t$8751;
continue lab$foldl;
};
};
};
var foldl$8579 = fix$8749.$foldl;
var v$8709 = compiler0$0OptLambda$1$12.getNodes$6451(compiler0$0OptLambda$1$12.getOutSet$6442(curSccNode$8205));
return foldl$8579(paths$8214,v$8709);
};
};
var findPath$8202 = fix$8748.$findPath;
return findPath$8202(sccNode1$8200,sccNode2$8201,null,null);
};
compiler0$0OptLambda$1$13.convertSccNodeToNodes$8225 = function(sccNode$8228){return (compiler0$0OptLambda$1$12.getInfoNode$6582(sccNode$8228))[0][1];
};
compiler0$0OptLambda$1$13.layoutPaths$8235 = function(layoutId$8238,paths$8241){return [0,[basis$0List$1.map$332(function(path$8590){return [0,[basis$0List$1.map$332(function(sccNode$8591){var t$8752;
var v$8691 = (compiler0$0OptLambda$1$12.getInfoNode$6582(sccNode$8591))[0];
var v$8692 = v$8691[0];
var v$8693 = v$8691[1];
var t$8755 = ("[" + ("sccNo " + (basis$0Int32$1.toString$458(v$8692)))) + ": ";
var t$8754;
var fix$8753 = {};
fix$8753.$foldr = function(v$8695){if (v$8695 == null) {return "]";
} else {var v$8696 = v$8695;
var v$8697 = v$8696[0];
var v$8698 = v$8696[1];
var v$8699 = fix$8753.$foldr(v$8698);
return ((layoutId$8238(compiler0$0OptLambda$1$6.getNodeId$2715(v$8697))) + ",") + v$8699;
};
};
var foldr$8694 = fix$8753.$foldr;
t$8754 = (foldr$8694(v$8693));
t$8752 = (t$8755 + t$8754);
return [1,t$8752];
},path$8590),[0,"--->"],"]",4,"[Start path: "]];
},paths$8241),[0,","],"...Finishing layout of paths]",4,"[Starting layout of paths..."]];
};
return 0;
})();
