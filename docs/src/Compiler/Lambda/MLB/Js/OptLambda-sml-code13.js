if ((typeof(compiler0$0OptLambda$1$13)) == "undefined") {compiler0$0OptLambda$1$13 = {};
};
(function(){compiler0$0OptLambda$1$13.scc$7937 = function(g$7940){var scc$7941 = [null];
var nodeStack$7948 = [null];
var dfsNo$7971 = [0];
var fix$8658 = {};
fix$8658.$makeSCC = function(n$7983){lab$makeSCC: while (true) {var n$$7984;
var v$8251 = nodeStack$7948[0];
if (v$8251 == null) {throw [compiler0$0OptLambda$1$6.en$DiGraphExn$2500,"DiGraph error in scc -- popNode.\n"];
} else {var v$8252 = v$8251;
var v$8253 = v$8252[0];
var v$8254 = v$8252[1];
(nodeStack$7948[0] = v$8254,0);
n$$7984 = v$8253;
};
(scc$7941[0] = [[n$$7984,basis$0List$1.hd$676(scc$7941[0])],basis$0List$1.tl$677(scc$7941[0])],0);
compiler0$0OptLambda$1$6.setDfsNo$2628(n$$7984,0);
if ((n$7983 == n$$7984)?false:true) {var t$8659 = n$7983;
var n$7983 = t$8659;
continue lab$makeSCC;
} else {return 0;
};
};
};
var makeSCC$7980 = fix$8658.$makeSCC;
var fix$8660 = {};
fix$8660.$processNode = function(n$7996){var low$7997;
(dfsNo$7971[0] = (SmlPrims.chk_ovf_i32(dfsNo$7971[0] + 1)),0);
low$7997 = dfsNo$7971[0];
compiler0$0OptLambda$1$6.setDfsNo$2628(n$7996,low$7997);
compiler0$0OptLambda$1$6.setVisited$2571(n$7996,true);
(nodeStack$7948[0] = [n$7996,nodeStack$7948[0]],0);
var low$7998;
var fix$8670 = {};
fix$8670.$foldl = function(v$8277,v$8278){lab$foldl: while (true) {if (v$8278 == null) {return v$8277;
} else {var v$8279 = v$8278;
var v$8280 = v$8279[0];
var v$8281 = v$8279[1];
var t$8672;
if ((compiler0$0OptLambda$1$6.getVisited$2563(v$8280))[0]) {var t$8671;
var v$8552 = (compiler0$0OptLambda$1$6.getDfsNo$2620(v$8280))[0];
t$8671 = ((v$8552 == 0)?false:true);
if (t$8671) {var v$8556 = (compiler0$0OptLambda$1$6.getDfsNo$2620(v$8280))[0];
t$8672 = ((v$8556 < v$8277)?v$8556:v$8277);
} else {t$8672 = v$8277;
};
} else {var v$8558 = fix$8660.$processNode(v$8280);
t$8672 = ((v$8558 < v$8277)?v$8558:v$8277);
};
var t$8673 = t$8672;
var t$8674 = v$8281;
var v$8277 = t$8673;
var v$8278 = t$8674;
continue lab$foldl;
};
};
};
var foldl$8276 = fix$8670.$foldl;
var v$8653 = compiler0$0OptLambda$1$6.getNodes$2537(compiler0$0OptLambda$1$6.getOutSet$2528(n$7996));
low$7998 = (foldl$8276(low$7997,v$8653));
if ((compiler0$0OptLambda$1$6.getDfsNo$2620(n$7996))[0] == low$7998) {(scc$7941[0] = [null,scc$7941[0]],0);
makeSCC$7980(n$7996);
} else {0;
};
return low$7998;
};
var processNode$7993 = fix$8660.$processNode;
(dfsNo$7971[0] = 0,0);
(nodeStack$7948[0] = null,0);
(scc$7941[0] = null,0);
var fix$8661 = {};
fix$8661.$app = function(v$8324){lab$app: while (true) {if (v$8324 == null) {return 0;
} else {var v$8325 = v$8324;
var v$8326 = v$8325[0];
var v$8327 = v$8325[1];
compiler0$0OptLambda$1$6.setVisited$2571(v$8326,false);
compiler0$0OptLambda$1$6.setDfsNo$2628(v$8326,0);
var t$8662 = v$8327;
var v$8324 = t$8662;
continue lab$app;
};
};
};
var app$8323 = fix$8661.$app;
app$8323(compiler0$0OptLambda$1$6.rangeGraph$2962(g$7940));
var fix$8663 = {};
fix$8663.$app = function(v$8336){lab$app: while (true) {if (v$8336 == null) {return 0;
} else {var v$8337 = v$8336;
var v$8338 = v$8337[0];
var v$8339 = v$8337[1];
if ((compiler0$0OptLambda$1$6.getVisited$2563(v$8338))[0] == false) {processNode$7993(v$8338);
0;
} else {0;
};
var t$8664 = v$8339;
var v$8336 = t$8664;
continue lab$app;
};
};
};
var app$8335 = fix$8663.$app;
app$8335(compiler0$0OptLambda$1$6.rangeGraph$2962(g$7940));
var t$8669;
var t$8668 = basis$0List$1.rev$257(scc$7941[0]);
var t$8667;
var fix$8665 = {};
fix$8665.$app = function(v$8359){lab$app: while (true) {if (v$8359 == null) {return 0;
} else {var v$8360 = v$8359;
var v$8361 = v$8360[0];
var v$8362 = v$8360[1];
compiler0$0OptLambda$1$6.setVisited$2571(v$8361,false);
compiler0$0OptLambda$1$6.setDfsNo$2628(v$8361,0);
var t$8666 = v$8362;
var v$8359 = t$8666;
continue lab$app;
};
};
};
var app$8358 = fix$8665.$app;
t$8667 = (app$8358(compiler0$0OptLambda$1$6.rangeGraph$2962(g$7940)));
t$8669 = [t$8668,t$8667];
return t$8669[0];
};
compiler0$0OptLambda$1$13.genSccGraph$8050 = function(g$8053){var sccs$8054 = compiler0$0OptLambda$1$13.scc$7937(g$8053);
var sccGraph$8055 = compiler0$0OptLambda$1$12.mkGraph$6520(0);
var fix$8675 = {};
fix$8675.$foldl = function(v$8381,v$8382){lab$foldl: while (true) {if (v$8382 == null) {return v$8381;
} else {var v$8383 = v$8382;
var v$8384 = v$8383[0];
var v$8385 = v$8383[1];
var t$8676;
compiler0$0OptLambda$1$12.addNode$6576(compiler0$0OptLambda$1$12.mkNode$6523([v$8381,v$8384]),sccGraph$8055);
var fix$8677 = {};
fix$8677.$app = function(v$8399){lab$app: while (true) {if (v$8399 == null) {return 0;
} else {var v$8400 = v$8399;
var v$8401 = v$8400[0];
var v$8402 = v$8400[1];
compiler0$0OptLambda$1$6.setSccNo$2647(v$8401,v$8381);
var t$8678 = v$8402;
var v$8399 = t$8678;
continue lab$app;
};
};
};
var app$8398 = fix$8677.$app;
app$8398(v$8384);
t$8676 = (SmlPrims.chk_ovf_i32(v$8381 + 1));
var t$8679 = t$8676;
var t$8680 = v$8385;
var v$8381 = t$8679;
var v$8382 = t$8680;
continue lab$foldl;
};
};
};
var foldl$8380 = fix$8675.$foldl;
foldl$8380(1,sccs$8054);
var fix$8681 = {};
fix$8681.$app = function(v$8412){lab$app: while (true) {if (v$8412 == null) {return 0;
} else {var v$8413 = v$8412;
var v$8414 = v$8413[0];
var v$8415 = v$8413[1];
var fix$8682 = {};
fix$8682.$app = function(v$8468){lab$app: while (true) {if (v$8468 == null) {return 0;
} else {var v$8469 = v$8468;
var v$8470 = v$8469[0];
var v$8471 = v$8469[1];
var fix$8683 = {};
fix$8683.$app = function(v$8474){lab$app: while (true) {if (v$8474 == null) {return 0;
} else {var v$8475 = v$8474;
var v$8476 = v$8475[0];
var v$8477 = v$8475[1];
var sccNode1$8478 = compiler0$0OptLambda$1$12.findNode$6555((compiler0$0OptLambda$1$6.getSccNo$2639(v$8470))[0],sccGraph$8055);
var sccNode2$8479 = compiler0$0OptLambda$1$12.findNode$6555((compiler0$0OptLambda$1$6.getSccNo$2639(v$8476))[0],sccGraph$8055);
((sccNode1$8478 == sccNode2$8479)?false:true)?(compiler0$0OptLambda$1$12.addEdge$6647(sccNode1$8478,sccNode2$8479,0)):0;
var t$8684 = v$8477;
var v$8474 = t$8684;
continue lab$app;
};
};
};
var app$8473 = fix$8683.$app;
app$8473(compiler0$0OptLambda$1$6.getNodes$2537(compiler0$0OptLambda$1$6.getOutSet$2528(v$8470)));
var t$8685 = v$8471;
var v$8468 = t$8685;
continue lab$app;
};
};
};
var app$8467 = fix$8682.$app;
app$8467(v$8414);
var t$8686 = v$8415;
var v$8412 = t$8686;
continue lab$app;
};
};
};
var app$8411 = fix$8681.$app;
app$8411(sccs$8054);
return sccGraph$8055;
};
compiler0$0OptLambda$1$13.layoutSccNo$8095 = function(sccNo$8098){return "sccNo " + (basis$0Int32$1.toString$458(sccNo$8098));
};
compiler0$0OptLambda$1$13.layoutComponent$8099 = function(layoutId$8102,v$8106){var v$8113 = v$8106[0];
var v$8114 = v$8106[1];
var t$8689 = ("[" + ("sccNo " + (basis$0Int32$1.toString$458(v$8113)))) + ": ";
var t$8688;
var fix$8687 = {};
fix$8687.$foldr = function(v$8605){if (v$8605 == null) {return "]";
} else {var v$8606 = v$8605;
var v$8607 = v$8606[0];
var v$8608 = v$8606[1];
var v$8610 = fix$8687.$foldr(v$8608);
return ((layoutId$8102(compiler0$0OptLambda$1$6.getNodeId$2689(v$8607))) + ",") + v$8610;
};
};
var foldr$8604 = fix$8687.$foldr;
t$8688 = (foldr$8604(v$8114));
return t$8689 + t$8688;
};
compiler0$0OptLambda$1$13.layoutEdge$8115 = function(NO_EDGE_INFO$8117){return "";
};
compiler0$0OptLambda$1$13.layoutScc$8118 = function(layoutId$8121,sccG$8124){return compiler0$0OptLambda$1$12.layoutGraph$6840(function(v$8618){var v$8619 = v$8618[0];
var v$8620 = v$8618[1];
var t$8692 = ("[" + ("sccNo " + (basis$0Int32$1.toString$458(v$8619)))) + ": ";
var t$8691;
var fix$8690 = {};
fix$8690.$foldr = function(v$8622){if (v$8622 == null) {return "]";
} else {var v$8623 = v$8622;
var v$8624 = v$8623[0];
var v$8625 = v$8623[1];
var v$8626 = fix$8690.$foldr(v$8625);
return ((layoutId$8121(compiler0$0OptLambda$1$6.getNodeId$2689(v$8624))) + ",") + v$8626;
};
};
var foldr$8621 = fix$8690.$foldr;
t$8691 = (foldr$8621(v$8620));
return t$8692 + t$8691;
},function(NO_EDGE_INFO$8509){return "";
},function(sccNo$8510){return "sccNo " + (basis$0Int32$1.toString$458(sccNo$8510));
},compiler0$0OptLambda$1$12.rootNodes$6703(sccG$8124));
};
compiler0$0OptLambda$1$13.exportSccVCG$8125 = function(title$8128,layoutId$8131,sccG$8134,stream$8137){return compiler0$0OptLambda$1$12.exportGraphVCG$6908(title$8128,function(v$8628){var v$8629 = v$8628[0];
var v$8630 = v$8628[1];
var t$8695 = ("[" + ("sccNo " + (basis$0Int32$1.toString$458(v$8629)))) + ": ";
var t$8694;
var fix$8693 = {};
fix$8693.$foldr = function(v$8632){if (v$8632 == null) {return "]";
} else {var v$8633 = v$8632;
var v$8634 = v$8633[0];
var v$8635 = v$8633[1];
var v$8636 = fix$8693.$foldr(v$8635);
return ((layoutId$8131(compiler0$0OptLambda$1$6.getNodeId$2689(v$8634))) + ",") + v$8636;
};
};
var foldr$8631 = fix$8693.$foldr;
t$8694 = (foldr$8631(v$8630));
return t$8695 + t$8694;
},function(NO_EDGE_INFO$8512){return "";
},function(sccNo$8513){return "sccNo " + (basis$0Int32$1.toString$458(sccNo$8513));
},null,sccG$8134,stream$8137);
};
compiler0$0OptLambda$1$13.pathsBetweenTwoNodes$8138 = function(node1$8141,node2$8144,sccG$8147){var sccNode1$8148 = compiler0$0OptLambda$1$12.findNode$6555((compiler0$0OptLambda$1$6.getSccNo$2639(node1$8141))[0],sccG$8147);
var sccNode2$8149 = compiler0$0OptLambda$1$12.findNode$6555((compiler0$0OptLambda$1$6.getSccNo$2639(node2$8144))[0],sccG$8147);
var fix$8696 = {};
fix$8696.$findPath = function(curSccNode$8153,sccNode2$8156,path$8159,paths$8162){if (curSccNode$8153 == sccNode2$8156) {return [basis$0List$1.rev$257([curSccNode$8153,path$8159]),paths$8162];
} else {var fix$8697 = {};
fix$8697.$foldl = function(v$8528,v$8529){lab$foldl: while (true) {if (v$8529 == null) {return v$8528;
} else {var v$8530 = v$8529;
var v$8531 = v$8530[0];
var v$8532 = v$8530[1];
var t$8698 = fix$8696.$findPath(v$8531,sccNode2$8156,[curSccNode$8153,path$8159],v$8528);
var t$8699 = v$8532;
var v$8528 = t$8698;
var v$8529 = t$8699;
continue lab$foldl;
};
};
};
var foldl$8527 = fix$8697.$foldl;
var v$8657 = compiler0$0OptLambda$1$12.getNodes$6399(compiler0$0OptLambda$1$12.getOutSet$6390(curSccNode$8153));
return foldl$8527(paths$8162,v$8657);
};
};
var findPath$8150 = fix$8696.$findPath;
return findPath$8150(sccNode1$8148,sccNode2$8149,null,null);
};
compiler0$0OptLambda$1$13.convertSccNodeToNodes$8173 = function(sccNode$8176){return (compiler0$0OptLambda$1$12.getInfoNode$6530(sccNode$8176))[0][1];
};
compiler0$0OptLambda$1$13.layoutPaths$8183 = function(layoutId$8186,paths$8189){return [0,[basis$0List$1.map$332(function(path$8538){return [0,[basis$0List$1.map$332(function(sccNode$8539){var t$8700;
var v$8639 = (compiler0$0OptLambda$1$12.getInfoNode$6530(sccNode$8539))[0];
var v$8640 = v$8639[0];
var v$8641 = v$8639[1];
var t$8703 = ("[" + ("sccNo " + (basis$0Int32$1.toString$458(v$8640)))) + ": ";
var t$8702;
var fix$8701 = {};
fix$8701.$foldr = function(v$8643){if (v$8643 == null) {return "]";
} else {var v$8644 = v$8643;
var v$8645 = v$8644[0];
var v$8646 = v$8644[1];
var v$8647 = fix$8701.$foldr(v$8646);
return ((layoutId$8186(compiler0$0OptLambda$1$6.getNodeId$2689(v$8645))) + ",") + v$8647;
};
};
var foldr$8642 = fix$8701.$foldr;
t$8702 = (foldr$8642(v$8641));
t$8700 = (t$8703 + t$8702);
return [1,t$8700];
},path$8538),[0,"--->"],"]",4,"[Start path: "]];
},paths$8189),[0,","],"...Finishing layout of paths]",4,"[Starting layout of paths..."]];
};
return 0;
})();
