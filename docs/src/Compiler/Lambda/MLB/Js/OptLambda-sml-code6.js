if ((typeof(compiler0$0OptLambda$1$6)) == "undefined") {compiler0$0OptLambda$1$6 = {};
};
(function(){compiler0$0OptLambda$1$6.en$DiGraphExn$2526 = new String("DiGraphExn");
compiler0$0OptLambda$1$6.pp$2527 = function(t$2530){return tools$0PrettyPrint$1.flatten$936(tools$0PrettyPrint$1.format$937(tools$0Flags$1$1.colwidth$100[0],t$2530));
};
compiler0$0OptLambda$1$6.log$2531 = function(s$2534){return basis$0TextIO$1.output$110(tools$0Flags$1$1.log$101[0],s$2534 + "\n");
};
compiler0$0OptLambda$1$6.die$2535 = function(errmsg$2538){return tools$0Crash$1.impossible$59("IntDiGraph." + errmsg$2538);
};
compiler0$0OptLambda$1$6.footnote$2539 = function(v$4042,v$4043){return v$4042;
};
compiler0$0OptLambda$1$6.freshAttributes$2546 = function(v$2548){var v$2549 = [false];
var v$2550 = [0];
var v$2551 = [0];
return [[0],v$2550,v$2551,[0],v$2549];
};
compiler0$0OptLambda$1$6.getOutSet$2554 = function(n$2557){return n$2557[0][1][2];
};
compiler0$0OptLambda$1$6.getNodes$2563 = function(out$2566){return basis$0List$1.map$332(function(v$2570){return v$2570[0];
},out$2566[0]);
};
compiler0$0OptLambda$1$6.getAttributes$2573 = function(n$2576){return n$2576[0][1][0];
};
compiler0$0OptLambda$1$6.setAttributes$2582 = function(n$2585,attr$2588){return (n$2585[0][1][0][0] = attr$2588,0);
};
compiler0$0OptLambda$1$6.getVisited$2589 = function(n$2592){return n$2592[0][1][0][0][4];
};
compiler0$0OptLambda$1$6.setVisited$2597 = function(n$2600,visited$2603){return (n$2600[0][1][0][0][4][0] = visited$2603,0);
};
compiler0$0OptLambda$1$6.getInEdges$2608 = function(n$2611){return n$2611[0][1][0][0][1];
};
compiler0$0OptLambda$1$6.setInEdges$2616 = function(n$2619,i$2622){return (n$2619[0][1][0][0][1][0] = i$2622,0);
};
compiler0$0OptLambda$1$6.getOutEdges$2627 = function(n$2630){return n$2630[0][1][0][0][2];
};
compiler0$0OptLambda$1$6.setOutEdges$2635 = function(n$2638,u$2641){return (n$2638[0][1][0][0][2][0] = u$2641,0);
};
compiler0$0OptLambda$1$6.getDfsNo$2646 = function(n$2649){return n$2649[0][1][0][0][0];
};
compiler0$0OptLambda$1$6.setDfsNo$2654 = function(n$2657,u$2660){return (n$2657[0][1][0][0][0][0] = u$2660,0);
};
compiler0$0OptLambda$1$6.getSccNo$2665 = function(n$2668){return n$2668[0][1][0][0][3];
};
compiler0$0OptLambda$1$6.setSccNo$2673 = function(n$2676,u$2679){return (n$2676[0][1][0][0][3][0] = u$2679,0);
};
compiler0$0OptLambda$1$6.mkGraph$2684 = function(v$2686){return [compiler0$0OptLambda$1$5.empty$291(0)];
};
compiler0$0OptLambda$1$6.mkNode$2687 = function(i$2690){var t$4051;
var t$4048;
var v$2691 = [i$2690];
var v$2692 = [null];
var t$4050;
var t$4049;
var v$3246 = [false];
var v$3247 = [0];
var v$3248 = [0];
t$4049 = [[0],v$3247,v$3248,[0],v$3246];
t$4050 = [t$4049];
t$4048 = [t$4050,v$2691,v$2692];
t$4051 = [0,t$4048];
return [t$4051];
};
compiler0$0OptLambda$1$6.getInfoNode$2694 = function(n$2697){return n$2697[0][1][1];
};
compiler0$0OptLambda$1$6.setInfoNode$2703 = function(n$2706,i$2709){return (n$2706[0][1][1][0] = i$2709,0);
};
compiler0$0OptLambda$1$6.getNodeId$2715 = function(n$2718){return n$2718[0][1][1][0];
};
compiler0$0OptLambda$1$6.findNode$2719 = function(id$2722,g$2725){var v$2730 = compiler0$0OptLambda$1$5.lookup$307(g$2725[0],id$2722);
switch (v$2730[0]) { case 0: {return v$2730[1];
 break; }default: {throw [compiler0$0OptLambda$1$6.en$DiGraphExn$2526,"DiGraph error in findNode: Node doesn't exist."];
} };
};
compiler0$0OptLambda$1$6.findNodeOpt$2733 = function(id$2736,g$2739){return compiler0$0OptLambda$1$5.lookup$307(g$2739[0],id$2736);
};
compiler0$0OptLambda$1$6.addNode$2740 = function(n$2743,g$2746){switch ((compiler0$0OptLambda$1$5.lookup$307(g$2746[0],n$2743[0][1][1][0]))[0]) { case 1: {return (g$2746[0] = (compiler0$0OptLambda$1$5.add$567(n$2743[0][1][1][0],n$2743,g$2746[0])),0);
 break; }default: {throw [compiler0$0OptLambda$1$6.en$DiGraphExn$2526,"DiGraph error in addNode: Node allready exist."];
} };
};
compiler0$0OptLambda$1$6.addNodeWithUpdate$2751 = function(n$2754,g$2757){try {switch ((compiler0$0OptLambda$1$5.lookup$307(g$2757[0],n$2754[0][1][1][0]))[0]) { case 1: {return (g$2757[0] = (compiler0$0OptLambda$1$5.add$567(n$2754[0][1][1][0],n$2754,g$2757[0])),0);
 break; }default: {throw [compiler0$0OptLambda$1$6.en$DiGraphExn$2526,"DiGraph error in addNode: Node allready exist."];
} };
} catch(v$4052) {return (function(v$2760){var t$4053 = v$2760;
if (t$4053[0] == compiler0$0OptLambda$1$6.en$DiGraphExn$2526) {var n$3265;
var id$3271 = n$2754[0][1][1][0];
var v$3273 = compiler0$0OptLambda$1$5.lookup$307(g$2757[0],id$3271);
switch (v$3273[0]) { case 0: {n$3265 = v$3273[1];
 break; }default: {throw [compiler0$0OptLambda$1$6.en$DiGraphExn$2526,"DiGraph error in findNode: Node doesn't exist."];
} };
var i$3266 = n$2754[0][1][1][0];
return (n$3265[0][1][1][0] = i$3266,0);
} else {throw v$2760;
};
})(v$4052);
};
};
compiler0$0OptLambda$1$6.findEdge$2761 = function(n1$2764,n2$2767){var v$2770 = n1$2764[0];
var v$2784 = v$2770[1];
var v$2785 = v$2784[2];
try {return (edlib$0edList$1.first$1115(function(v$2778){return v$2778[0] == n2$2767;
},v$2785[0]))[1];
} catch(v$4054) {return (function(v$2783){var t$4055 = v$2783;
if (t$4055[0] == edlib$0edList$1.en$First$1114) {throw [compiler0$0OptLambda$1$6.en$DiGraphExn$2526,"Digraph error in findEdge: Edge does not exist."];
} else {throw v$2783;
};
})(v$4054);
};
};
compiler0$0OptLambda$1$6.findEdgeOpt$2786 = function(n1$2789,n2$2792){var v$2795 = n1$2789[0];
var v$2809 = v$2795[1];
var v$2810 = v$2809[2];
try {return [0,(edlib$0edList$1.first$1115(function(v$2803){return v$2803[0] == n2$2792;
},v$2810[0]))[1]];
} catch(v$4056) {return (function(v$2808){var t$4057 = v$2808;
if (t$4057[0] == edlib$0edList$1.en$First$1114) {return [1];
} else {throw v$2808;
};
})(v$4056);
};
};
compiler0$0OptLambda$1$6.addEdge$2811 = function(n1$2814,n2$2817,info$2820){var v$2823 = n1$2814[0];
var v$2832 = v$2823[1];
var v$2833 = v$2832[2];
var t$4061;
var t$4060;
var fix$4058 = {};
fix$4058.$member = function(v$3996){lab$member: while (true) {if (v$3996 == null) {return false;
} else {var v$3997 = v$3996;
var v$3998 = v$3997[0];
var v$3999 = v$3997[1];
if (n2$2817 == v$3998) {return true;
} else {var t$4059 = v$3999;
var v$3996 = t$4059;
continue lab$member;
};
};
};
};
var member$3995 = fix$4058.$member;
t$4060 = (member$3995(basis$0List$1.map$332(function(v$3304){return v$3304[0];
},v$2833[0])));
t$4061 = (t$4060 == false);
if (t$4061) {(v$2833[0] = [[n2$2817,info$2820],v$2833[0]],0);
var u$3308 = SmlPrims.chk_ovf_i32(n1$2814[0][1][0][0][2][0] + 1);
(n1$2814[0][1][0][0][2][0] = u$3308,0);
var i$3315 = SmlPrims.chk_ovf_i32(n2$2817[0][1][0][0][1][0] + 1);
return (n2$2817[0][1][0][0][1][0] = i$3315,0);
} else {return 0;
};
};
compiler0$0OptLambda$1$6.addEdgeWithUpdate$2834 = function(n1$2837,n2$2840,info$2843){var v$2846 = n1$2837[0];
var v$2865 = v$2846[1];
var v$2866 = v$2865[2];
var t$4065;
var t$4064;
var fix$4062 = {};
fix$4062.$member = function(v$4005){lab$member: while (true) {if (v$4005 == null) {return false;
} else {var v$4006 = v$4005;
var v$4007 = v$4006[0];
var v$4008 = v$4006[1];
if (n2$2840 == v$4007) {return true;
} else {var t$4063 = v$4008;
var v$4005 = t$4063;
continue lab$member;
};
};
};
};
var member$4004 = fix$4062.$member;
t$4064 = (member$4004(basis$0List$1.map$332(function(v$3336){return v$3336[0];
},v$2866[0])));
t$4065 = (t$4064 == false);
if (t$4065) {(v$2866[0] = [[n2$2840,info$2843],v$2866[0]],0);
var u$3340 = SmlPrims.chk_ovf_i32(n1$2837[0][1][0][0][2][0] + 1);
(n1$2837[0][1][0][0][2][0] = u$3340,0);
var i$3347 = SmlPrims.chk_ovf_i32(n2$2840[0][1][0][0][1][0] + 1);
return (n2$2840[0][1][0][0][1][0] = i$3347,0);
} else {return (v$2866[0] = (basis$0List$1.map$332(function(v$2858){var v$2863 = v$2858[0];
var v$2864 = v$2858[1];
return (v$2863 == n2$2840)?[v$2863,info$2843]:[v$2863,v$2864];
},v$2866[0])),0);
};
};
compiler0$0OptLambda$1$6.rootNodes$2867 = function(g$2870){return compiler0$0OptLambda$1$5.fold$1036(function(v$3361){var v$3362 = v$3361[0];
var v$3363 = v$3361[1];
return (v$3362[0][1][0][0][1][0] == 0)?[v$3362,v$3363]:v$3363;
},null,g$2870[0]);
};
compiler0$0OptLambda$1$6.leafNodes$2882 = function(g$2885){return compiler0$0OptLambda$1$5.fold$1036(function(v$3367){var v$3368 = v$3367[0];
var v$3369 = v$3367[1];
return (v$3368[0][1][0][0][2][0] == 0)?[v$3368,v$3369]:v$3369;
},null,g$2885[0]);
};
compiler0$0OptLambda$1$6.succNodes$2897 = function(n$2900){var v$2903 = n$2900[0];
var v$2904 = v$2903[1];
var v$2905 = v$2904[2];
return basis$0List$1.map$332(function(v$3373){return v$3373[0];
},v$2905[0]);
};
compiler0$0OptLambda$1$6.predNodes$2906 = function(n$2909,g$2912){return compiler0$0OptLambda$1$5.fold$1036(function(v$3386){var v$3387 = v$3386[0];
var v$3388 = v$3386[1];
var v$3389 = v$3387[0];
var v$3390 = v$3389[1];
var v$3391 = v$3390[2];
var t$4068;
var fix$4066 = {};
fix$4066.$member = function(v$3403){lab$member: while (true) {if (v$3403 == null) {return false;
} else {var v$3404 = v$3403;
var v$3405 = v$3404[0];
var v$3406 = v$3404[1];
if (n$2909 == v$3405) {return true;
} else {var t$4067 = v$3406;
var v$3403 = t$4067;
continue lab$member;
};
};
};
};
var member$3402 = fix$4066.$member;
t$4068 = (member$3402(basis$0List$1.map$332(function(v$3400){return v$3400[0];
},v$3391[0])));
return t$4068?[v$3387,v$3388]:v$3388;
},null,g$2912[0]);
};
compiler0$0OptLambda$1$6.fold$2929 = function(f$2932,acc$2935,g$2938){return compiler0$0OptLambda$1$5.fold$1036(f$2932,acc$2935,g$2938[0]);
};
compiler0$0OptLambda$1$6.reachable$2939 = function(n$2942){var fix$4069 = {};
fix$4069.$reachable$ = function(v$2964,v$4044){var v$2965 = v$2964[0][1];
var v$2966 = v$2965[2];
if (v$2964[0][1][0][0][4][0] == false) {(v$2964[0][1][0][0][4][0] = true,0);
var t$4073;
var v$4014 = [v$2964,v$4044];
var fix$4074 = {};
fix$4074.$foldr = function(v$4016){if (v$4016 == null) {return v$4014;
} else {var v$4017 = v$4016;
var v$4018 = v$4017[0];
var v$4019 = v$4017[1];
var v$4021 = fix$4074.$foldr(v$4019);
return fix$4069.$reachable$(v$4018,v$4021);
};
};
var foldr$4015 = fix$4074.$foldr;
t$4073 = (function(v$4047){return foldr$4015(v$4047);
});
return t$4073(basis$0List$1.map$332(function(v$3437){return v$3437[0];
},v$2966[0]));
} else {return v$4044;
};
};
var reachable$$2943 = fix$4069.$reachable$;
var fix$4070 = {};
fix$4070.$SetVisitedFalse = function(node$2971){var v$2982 = node$2971[0][1];
var v$2983 = v$2982[2];
if (node$2971[0][1][0][0][4][0] == true) {(node$2971[0][1][0][0][4][0] = false,0);
var fix$4071 = {};
fix$4071.$app = function(v$3451){lab$app: while (true) {if (v$3451 == null) {return 0;
} else {var v$3452 = v$3451;
var v$3453 = v$3452[0];
var v$3454 = v$3452[1];
fix$4070.$SetVisitedFalse(v$3453);
var t$4072 = v$3454;
var v$3451 = t$4072;
continue lab$app;
};
};
};
var app$3450 = fix$4071.$app;
return app$3450(basis$0List$1.map$332(function(v$3456){return v$3456[0];
},v$2983[0]));
} else {return 0;
};
};
var SetVisitedFalse$2968 = fix$4070.$SetVisitedFalse;
return [reachable$$2943(n$2942,null),SetVisitedFalse$2968(n$2942)][0];
};
compiler0$0OptLambda$1$6.domGraph$2984 = function(g$2987){return compiler0$0OptLambda$1$5.dom$907(g$2987[0]);
};
compiler0$0OptLambda$1$6.rangeGraph$2988 = function(g$2991){return compiler0$0OptLambda$1$5.range$934(g$2991[0]);
};
compiler0$0OptLambda$1$6.layoutNode$2992 = function(layoutInfo$2995,n$2998){return [0,[null,[1],"",0,layoutInfo$2995(n$2998[0][1][1][0])]];
};
compiler0$0OptLambda$1$6.layoutGraph$3004 = function(layoutInfo$3007,layoutEdgeInfo$3010,layoutId$3013,rootNodes$3016){var fix$4075 = {};
fix$4075.$makeChildren = function(level$3021,node$3024){return basis$0List$1.map$332(function(v$3028){var v$3047 = v$3028[0];
var v$3048 = v$3028[1];
if (v$3047[0][1][0][0][4][0] == false) {(v$3047[0][1][0][0][4][0] = true,0);
var startStr$3035 = ((("   --" + (layoutId$3013(node$3024[0][1][1][0]))) + (layoutEdgeInfo$3010(v$3048))) + "-->   ") + (layoutInfo$3007(v$3047[0][1][1][0]));
var t$4087;
var v$3038 = startStr$3035.length;
t$4087 = [fix$4075.$makeChildren(SmlPrims.chk_ovf_i32(level$3021 + startStr$3035.length),v$3047),[1],";",v$3038,startStr$3035];
return [0,t$4087];
} else {var startStr$3041 = (((("   --" + (layoutId$3013(node$3024[0][1][1][0]))) + (layoutEdgeInfo$3010(v$3048))) + "-->   [*") + (layoutId$3013(v$3047[0][1][1][0]))) + "*]";
return [0,[[[1," "],null],[1],";",startStr$3041.length,startStr$3041]];
};
},node$3024[0][1][2][0]);
};
var makeChildren$3018 = fix$4075.$makeChildren;
var t$4086;
var t$4085;
var t$4084 = basis$0List$1.rev$257;
var t$4083;
var fix$4076 = {};
fix$4076.$foldl = function(v$3507,v$3508){lab$foldl: while (true) {if (v$3508 == null) {return v$3507;
} else {var v$3509 = v$3508;
var v$3510 = v$3509[0];
var v$3511 = v$3509[1];
var t$4077;
if (v$3510[0][1][0][0][4][0] == false) {(v$3510[0][1][0][0][4][0] = true,0);
var t$4080;
var t$4079;
var t$4078;
var v$3537 = layoutInfo$3007(v$3510[0][1][1][0]);
t$4078 = [makeChildren$3018(0,v$3510),[1],"",0,v$3537];
t$4079 = [0,t$4078];
t$4080 = [t$4079,v$3507];
t$4077 = t$4080;
} else {t$4077 = v$3507;
};
var t$4081 = t$4077;
var t$4082 = v$3511;
var v$3507 = t$4081;
var v$3508 = t$4082;
continue lab$foldl;
};
};
};
var foldl$3506 = fix$4076.$foldl;
var v$4045 = null;
t$4083 = (foldl$3506(v$4045,rootNodes$3016));
t$4085 = (t$4084(t$4083));
t$4086 = [t$4085,[1],"...Finishing layout of graph]",0,"[Starting layout of graph..."];
return [0,t$4086];
};
compiler0$0OptLambda$1$6.exportGraphVCG$3072 = function(title$3075,layoutInfo$3078,layoutEdgeInfo$3081,layoutId$3084,classes$3087,g$3090,out$3093){var attrGraph$3158 = (((((((((((("title: \"" + title$3075) + "\"") + "\n") + "splines: yes") + "\n") + "finetuning: no") + "\n") + "folding: 1") + "\n") + "orientation: left_to_right") + "\n") + "ignore_singles: yes") + "\n";
var range_g$3160 = compiler0$0OptLambda$1$5.range$934(g$3090[0]);
basis$0TextIO$1.output$110(out$3093,"graph: {\n");
basis$0TextIO$1.output$110(out$3093,attrGraph$3158);
basis$0List$1.map$697(function(v$3693){var v$3694 = v$3693[0];
var v$3695 = v$3693[1];
return basis$0TextIO$1.output$110(out$3093,(((("classname " + (basis$0Int32$1.toString$458(v$3694))) + ":\"") + v$3695) + "\"") + "\n");
},classes$3087);
basis$0List$1.map$697(function(node$3701){var titleNode$3702 = ("title: \"" + (layoutId$3084(node$3701[0][1][1][0]))) + "\" ";
var labelNode$3705 = ("label: \"" + (layoutInfo$3078(node$3701[0][1][1][0]))) + "\" ";
return basis$0TextIO$1.output$110(out$3093,(("node: {" + titleNode$3702) + labelNode$3705) + "}\n");
},range_g$3160);
basis$0List$1.map$697(function(node$3713){var sourcename$3714 = ("sourcename: \"" + (layoutId$3084(node$3713[0][1][1][0]))) + "\" ";
return basis$0List$1.map$697(function(v$3719){var v$3720 = v$3719[0];
var v$3721 = v$3719[1];
return basis$0TextIO$1.output$110(out$3093,((((((("edge: {" + sourcename$3714) + (("targetname: \"" + (layoutId$3084(v$3720[0][1][1][0]))) + "\" ")) + "class: ") + "1 ") + "label: \" ") + (layoutEdgeInfo$3081(v$3721))) + "\"") + "}\n");
},node$3713[0][1][2][0]);
},range_g$3160);
basis$0List$1.map$697(function(v$3732){var v$3733 = v$3732[0];
var v$3734 = v$3732[1];
var v$3735 = v$3732[2];
var class$3736 = ("class: " + (basis$0Int32$1.toString$458(v$3733))) + " ";
var fix$4088 = {};
fix$4088.$app = function(v$3742){lab$app: while (true) {if (v$3742 == null) {return 0;
} else {var v$3743 = v$3742;
var v$3744 = v$3743[0];
var v$3745 = v$3743[1];
var v$3747 = v$3744[0];
var v$3748 = v$3744[1];
var t$4099 = basis$0TextIO$1.output$110;
var t$4098 = out$3093;
var t$4097;
var t$4096;
var t$4095 = (("edge: {" + (("sourcename: \"" + (layoutId$3084(v$3747[0][1][1][0]))) + "\" ")) + (("targetname: \"" + (layoutId$3084(v$3748[0][1][1][0]))) + "\" ")) + class$3736;
var t$4089;
var edgeInfo$3761;
var v$3762 = v$3747[0];
var v$3763 = v$3762[1];
var v$3764 = v$3763[2];
try {edgeInfo$3761 = (edlib$0edList$1.first$1115((function(env$4092){return function(v$3765){var v$4091 = env$4092[0];
return v$3765[0] == v$4091;
};
})([v$3748]),v$3764[0]))[1];
} catch(v$4090) {edgeInfo$3761 = (((function(env$4093){return function(v$3771){var t$4094 = v$3771;
if (t$4094[0] == edlib$0edList$1.en$First$1114) {throw [compiler0$0OptLambda$1$6.en$DiGraphExn$2526,"Digraph error in findEdge: Edge does not exist."];
} else {throw v$3771;
};
};
})([]))(v$4090));
};
t$4089 = (((("label: \"" + v$3734) + "(") + (layoutEdgeInfo$3081(edgeInfo$3761))) + ")\"");
t$4096 = (t$4095 + t$4089);
t$4097 = (t$4096 + "}\n");
t$4099(t$4098,t$4097);
var t$4100 = v$3745;
var v$3742 = t$4100;
continue lab$app;
};
};
};
var app$3741 = fix$4088.$app;
return app$3741(v$3735);
},classes$3087);
return basis$0TextIO$1.output$110(out$3093,"}\n");
};
return 0;
})();
