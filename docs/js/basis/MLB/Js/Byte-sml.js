if ((typeof(basis$0Byte$1)) == "undefined") {basis$0Byte$1 = {};
};
(function(){basis$0Byte$1.byteToChar$54 = function(x$57){return x$57;
};
basis$0Byte$1.charToByte$58 = function(x$61){return x$61;
};
basis$0Byte$1.bytesToString$62 = function(x$65){return x$65;
};
basis$0Byte$1.stringToBytes$66 = function(x$69){return x$69;
};
basis$0Byte$1.unpackStringVec$70 = function(v$76,v$77,v$78){var v$136 = basis$0ByteSlice$1$6.slice$1304(v$76,v$77,[0,v$78]);
var v$137 = v$136[0];
var v$138 = v$136[1];
var v$139 = v$136[2];
var newvec$140 = Array(v$139);
var fix$165 = {};
fix$165.$copy = function(j$142){lab$copy: while (true) {if (j$142 < v$139) {(newvec$140[j$142] = (v$137.charCodeAt(SmlPrims.chk_ovf_i32(v$138 + j$142))),0);
var t$166 = SmlPrims.chk_ovf_i32(j$142 + 1);
var j$142 = t$166;
continue lab$copy;
} else {return 0;
};
};
};
var copy$141 = fix$165.$copy;
copy$141(0);
return SmlPrims.charArrayToString(newvec$140);
};
basis$0Byte$1.unpackString$79 = function(v$85,v$86,v$87){var v$144 = basis$0ByteSlice$1$12.slice$3454(v$85,v$86,[0,v$87]);
var v$145 = v$144[0];
var v$146 = v$144[1];
var v$147 = v$144[2];
var newvec$148 = Array(v$147);
var fix$167 = {};
fix$167.$copy = function(j$150){lab$copy: while (true) {if (j$150 < v$147) {(newvec$148[j$150] = v$145[SmlPrims.chk_ovf_i32(v$146 + j$150)],0);
var t$168 = SmlPrims.chk_ovf_i32(j$150 + 1);
var j$150 = t$168;
continue lab$copy;
} else {return 0;
};
};
};
var copy$149 = fix$167.$copy;
copy$149(0);
return SmlPrims.charArrayToString(newvec$148);
};
basis$0Byte$1.packString$88 = function(v$106,v$107,v$108){var v$103 = v$108[0];
var v$104 = v$108[1];
var v$105 = v$108[2];
var src$98 = basis$0ByteSlice$1$6.slice$1304(v$103,v$104,[0,v$105]);
var v$157 = src$98[0];
var v$158 = src$98[1];
var v$159 = src$98[2];
if ((v$107 < 0)?true:((SmlPrims.chk_ovf_i32(v$107 + v$159)) > v$106.length)) {throw CompilerInitial.exn$Subscript$52;
} else {var fix$169 = {};
fix$169.$lo2hi = function(j$161){lab$lo2hi: while (true) {if (j$161 < v$159) {(v$106[SmlPrims.chk_ovf_i32(v$107 + j$161)] = (v$157.charCodeAt(SmlPrims.chk_ovf_i32(v$158 + j$161))),0);
var t$170 = SmlPrims.chk_ovf_i32(j$161 + 1);
var j$161 = t$170;
continue lab$lo2hi;
} else {return 0;
};
};
};
var lo2hi$160 = fix$169.$lo2hi;
return lo2hi$160(0);
};
};
return 0;
})();
