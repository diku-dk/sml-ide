if ((typeof(basis$0PackRealBig$1)) == "undefined") {basis$0PackRealBig$1 = {};
};
(function(){basis$0PackRealBig$1.bytesPerElem$55 = 8;
basis$0PackRealBig$1.isBigEndian$56 = true;
basis$0PackRealBig$1.toBytes$75 = function(r$78){var vec$263 = SmlPrims.real_to_bytes(r$78);
var len$264 = vec$263.length;
if ((len$264 < 0)?true:(len$264 > 16777211)) {throw CompilerInitial.exn$Size$53;
} else {var t$265 = Array(len$264);
var fix$282 = {};
fix$282.$loop = function(j$267){lab$loop: while (true) {if (j$267 < len$264) {var t$285 = t$265;
var t$284 = j$267;
var t$283;
var v$268 = SmlPrims.chk_ovf_i32((SmlPrims.chk_ovf_i32(len$264 - 1)) - j$267);
if ((v$268 < 0)?true:(v$268 >= vec$263.length)) {throw CompilerInitial.exn$Subscript$52;
} else {t$283 = (vec$263.charCodeAt(v$268));
};
(t$285[t$284] = t$283,0);
var t$286 = SmlPrims.chk_ovf_i32(j$267 + 1);
var j$267 = t$286;
continue lab$loop;
} else {return 0;
};
};
};
var loop$266 = fix$282.$loop;
loop$266(0);
return SmlPrims.charArrayToString(t$265);
};
};
basis$0PackRealBig$1.fromBytes$79 = function(vec$82){var t$287;
var len$270 = vec$82.length;
if ((len$270 < 0)?true:(len$270 > 16777211)) {throw CompilerInitial.exn$Size$53;
} else {var t$271 = Array(len$270);
var fix$288 = {};
fix$288.$loop = function(j$273){lab$loop: while (true) {if (j$273 < len$270) {var t$291 = t$271;
var t$290 = j$273;
var t$289;
var v$274 = SmlPrims.chk_ovf_i32((SmlPrims.chk_ovf_i32(len$270 - 1)) - j$273);
if ((v$274 < 0)?true:(v$274 >= vec$82.length)) {throw CompilerInitial.exn$Subscript$52;
} else {t$289 = (vec$82.charCodeAt(v$274));
};
(t$291[t$290] = t$289,0);
var t$292 = SmlPrims.chk_ovf_i32(j$273 + 1);
var j$273 = t$292;
continue lab$loop;
} else {return 0;
};
};
};
var loop$272 = fix$288.$loop;
loop$272(0);
t$287 = (SmlPrims.charArrayToString(t$271));
};
return SmlPrims.bytes_to_real(t$287);
};
basis$0PackRealBig$1.subVec$83 = function(v$88,v$89){var t$293;
var vec$161 = basis$0ByteSlice$1$6.slice$1304(v$88,SmlPrims.chk_ovf_i32(v$89 * 8),[0,8]);
var len$162 = vec$161[2];
if ((len$162 < 0)?true:(len$162 > 16777211)) {throw CompilerInitial.exn$Size$53;
} else {var t$167 = Array(len$162);
var fix$294 = {};
fix$294.$loop = function(j$169){lab$loop: while (true) {if (j$169 < len$162) {var t$297 = t$167;
var t$296 = j$169;
var t$295;
var v$260 = SmlPrims.chk_ovf_i32((SmlPrims.chk_ovf_i32(len$162 - 1)) - j$169);
var v$232 = vec$161[0];
var v$233 = vec$161[1];
var v$234 = vec$161[2];
if ((v$260 < 0)?true:(v$260 >= v$234)) {throw CompilerInitial.exn$Subscript$52;
} else {t$295 = (v$232.charCodeAt(SmlPrims.chk_ovf_i32(v$233 + v$260)));
};
(t$297[t$296] = t$295,0);
var t$298 = SmlPrims.chk_ovf_i32(j$169 + 1);
var j$169 = t$298;
continue lab$loop;
} else {return 0;
};
};
};
var loop$168 = fix$294.$loop;
loop$168(0);
t$293 = (SmlPrims.charArrayToString(t$167));
};
return SmlPrims.bytes_to_real(t$293);
};
basis$0PackRealBig$1.subArr$90 = function(v$95,v$96){var t$299;
var vec$180 = basis$0ByteSlice$1$12.slice$3454(v$95,SmlPrims.chk_ovf_i32(v$96 * 8),[0,8]);
var len$181 = vec$180[2];
if ((len$181 < 0)?true:(len$181 > 16777211)) {throw CompilerInitial.exn$Size$53;
} else {var t$186 = Array(len$181);
var fix$300 = {};
fix$300.$loop = function(j$188){lab$loop: while (true) {if (j$188 < len$181) {var t$303 = t$186;
var t$302 = j$188;
var t$301;
var v$262 = SmlPrims.chk_ovf_i32((SmlPrims.chk_ovf_i32(len$181 - 1)) - j$188);
var v$253 = vec$180[0];
var v$254 = vec$180[1];
var v$255 = vec$180[2];
if ((v$262 < 0)?true:(v$262 >= v$255)) {throw CompilerInitial.exn$Subscript$52;
} else {t$301 = v$253[SmlPrims.chk_ovf_i32(v$254 + v$262)];
};
(t$303[t$302] = t$301,0);
var t$304 = SmlPrims.chk_ovf_i32(j$188 + 1);
var j$188 = t$304;
continue lab$loop;
} else {return 0;
};
};
};
var loop$187 = fix$300.$loop;
loop$187(0);
t$299 = (SmlPrims.charArrayToString(t$186));
};
return SmlPrims.bytes_to_real(t$299);
};
basis$0PackRealBig$1.update$97 = function(v$106,v$107,v$108){var v$281;
var v$103;
var vec$275 = SmlPrims.real_to_bytes(v$108);
var len$276 = vec$275.length;
if ((len$276 < 0)?true:(len$276 > 16777211)) {throw CompilerInitial.exn$Size$53;
} else {var t$277 = Array(len$276);
var fix$305 = {};
fix$305.$loop = function(j$279){lab$loop: while (true) {if (j$279 < len$276) {var t$308 = t$277;
var t$307 = j$279;
var t$306;
var v$280 = SmlPrims.chk_ovf_i32((SmlPrims.chk_ovf_i32(len$276 - 1)) - j$279);
if ((v$280 < 0)?true:(v$280 >= vec$275.length)) {throw CompilerInitial.exn$Subscript$52;
} else {t$306 = (vec$275.charCodeAt(v$280));
};
(t$308[t$307] = t$306,0);
var t$309 = SmlPrims.chk_ovf_i32(j$279 + 1);
var j$279 = t$309;
continue lab$loop;
} else {return 0;
};
};
};
var loop$278 = fix$305.$loop;
loop$278(0);
v$103 = (SmlPrims.charArrayToString(t$277));
};
v$281 = [SmlPrims.chk_ovf_i32(v$107 * 8),v$106,v$103];
return basis$0ByteTable$1$22.copyVec$4055(v$281[0],v$281[1],v$281[2]);
};
return 0;
})();
