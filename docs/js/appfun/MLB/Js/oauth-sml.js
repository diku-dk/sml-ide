if ((typeof(oauth$0oauth$1)) == "undefined") {oauth$0oauth$1 = {};
};
(function(){var getCookie$121 = function(k$124){var cookies$125 = basis$0String$1.tokens$224(function(c$128){return c$128 == 59;
},(function(document){return document.cookie;})(js$0Js$1.document$88));
var pairs$129 = basis$0List$1.map$697(function(s$338){var v$339 = basis$0String$1.tokens$224(function(c$340){return c$340 == 61;
},s$338);
if (v$339 == null) {throw [basis$0Initial$1.en$Fail$54,"OAuth.keyvalues: " + s$338];
} else {var v$341 = v$339;
var v$342 = v$341[1];
if (v$342 == null) {throw [basis$0Initial$1.en$Fail$54,"OAuth.keyvalues: " + s$338];
} else {var v$343 = v$342;
if (v$343[1] == null) {return [v$341[0],v$343[0]];
} else {throw [basis$0Initial$1.en$Fail$54,"OAuth.keyvalues: " + s$338];
};
};
};
},cookies$125);
var fix$671 = {};
fix$671.$look = function(v$615){lab$look: while (true) {if (v$615 == null) {return [1];
} else {var v$616 = v$615;
var v$617 = v$616[0];
var v$618 = v$617[0];
var v$619 = v$617[1];
var v$620 = v$616[1];
if (k$124 == v$618) {return [0,v$619];
} else {var t$672 = v$620;
var v$615 = t$672;
continue lab$look;
};
};
};
};
var look$614 = fix$671.$look;
return look$614(pairs$129);
};
oauth$0oauth$1.getLocation$158 = function(v$160){return (function(){return window.location.href;})();
};
oauth$0oauth$1.client$163 = function(x$166){return x$166;
};
oauth$0oauth$1.token$167 = function(v$665,v$666,v$667){var v$175 = getCookie$121("oauth_access_token");
switch (v$175[0]) { case 0: {var v$177 = v$175[1];
return [0,v$177];
 break; }default: {try {var v$185 = basis$0String$1.tokens$224(function(c$245){return c$245 == 35;
},(function(){return window.location.href;})());
if (v$185 == null) {return [1];
} else {var v$187 = v$185;
var v$188 = v$187[1];
if (v$188 == null) {return [1];
} else {var v$190 = v$188;
if (v$190[1] == null) {var v$240 = v$187[0];
var v$241 = v$190[0];
var args$192 = basis$0String$1.tokens$224(function(c$195){return c$195 == 38;
},v$241);
var arg_pairs$196 = basis$0List$1.map$697(function(s$387){var v$388 = basis$0String$1.tokens$224(function(c$389){return c$389 == 61;
},s$387);
if (v$388 == null) {throw [basis$0Initial$1.en$Fail$54,"OAuth.keyvalues: " + s$387];
} else {var v$390 = v$388;
var v$391 = v$390[1];
if (v$391 == null) {throw [basis$0Initial$1.en$Fail$54,"OAuth.keyvalues: " + s$387];
} else {var v$392 = v$391;
if (v$392[1] == null) {return [v$390[0],v$392[0]];
} else {throw [basis$0Initial$1.en$Fail$54,"OAuth.keyvalues: " + s$387];
};
};
};
},args$192);
var v$237 = getCookie$121("oauth_state");
switch (v$237[0]) { case 0: {var v$239 = v$237[1];
var v$635;
var fix$674 = {};
fix$674.$look = function(v$637){lab$look: while (true) {if (v$637 == null) {return [1];
} else {var v$638 = v$637;
var v$639 = v$638[0];
var v$640 = v$639[0];
var v$641 = v$639[1];
var v$642 = v$638[1];
if ("state" == v$640) {return [0,v$641];
} else {var t$675 = v$642;
var v$637 = t$675;
continue lab$look;
};
};
};
};
var look$636 = fix$674.$look;
v$635 = (look$636(arg_pairs$196));
switch (v$635[0]) { case 0: {var v$643 = v$635[1];
if (v$643 == v$239) {0;
} else {throw [basis$0Initial$1.en$Fail$54,(("OAuth.token: Expecting state arg " + v$239) + " - got ") + v$643];
};
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"OAuth.token: Expecting a state parameter"];
} };
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"OAuth.token: Expecting state cookie"];
} };
var v$646;
var fix$676 = {};
fix$676.$look = function(v$648){lab$look: while (true) {if (v$648 == null) {return [1];
} else {var v$649 = v$648;
var v$650 = v$649[0];
var v$651 = v$650[0];
var v$652 = v$650[1];
var v$653 = v$649[1];
if ("token_type" == v$651) {return [0,v$652];
} else {var t$677 = v$653;
var v$648 = t$677;
continue lab$look;
};
};
};
};
var look$647 = fix$676.$look;
v$646 = (look$647(arg_pairs$196));
switch (v$646[0]) { case 0: {var v$654 = v$646[1];
if (v$654 == "bearer") {0;
} else {throw [basis$0Initial$1.en$Fail$54,"OAuth.token: Expecting token_type arg bearer - got " + v$654];
};
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"OAuth.token: Expecting a token_type parameter"];
} };
var t$217;
var v$222;
var fix$678 = {};
fix$678.$look = function(v$657){lab$look: while (true) {if (v$657 == null) {return [1];
} else {var v$658 = v$657;
var v$659 = v$658[0];
var v$660 = v$659[0];
var v$661 = v$659[1];
var v$662 = v$658[1];
if ("access_token" == v$660) {return [0,v$661];
} else {var t$679 = v$662;
var v$657 = t$679;
continue lab$look;
};
};
};
};
var look$656 = fix$678.$look;
v$222 = (look$656(arg_pairs$196));
switch (v$222[0]) { case 0: {t$217 = v$222[1];
 break; }default: {throw [basis$0Initial$1.en$Fail$54,"OAuth.token: Expecting access_token"];
} };
(function(document,value){document.cookie=value;})(js$0Js$1.document$88,"oauth_access_token=" + t$217);
(function(document,value){document.cookie=value;})(js$0Js$1.document$88,"oauth_state= ; expires = Thu, 01 Jan 1970 00:00:00 GMT");
(function(url){return (window.location = url);})(v$240);
return [0,t$217];
} else {return [1];
};
};
};
} catch(v$673) {return (function(v$249){var t$680 = v$249;
if (t$680[0] == basis$0Initial$1.en$Fail$54) {return [1];
} else {throw v$249;
};
})(v$673);
};
} };
};
oauth$0oauth$1.authorize$250 = function(v$275,v$276,v$277){var state$270;
var v$668 = SmlPrims.getrealtime();
state$270 = (basis$0Time$1.toString$150(v$668[0],v$668[1]));
var args$271 = [["client_id",v$276],[["state",state$270],[["redirect_uri",v$277],[["response_type","token"],null]]]];
var newloc$272 = (v$275 + "?") + (basis$0String$1.concatWith$182("&",basis$0List$1.map$697(function(v$489){return (v$489[0] + "=") + v$489[1];
},args$271)));
(function(document,value){document.cookie=value;})(js$0Js$1.document$88,"oauth_state=" + state$270);
return (function(url){return (window.location = url);})(newloc$272);
};
oauth$0oauth$1.logout$278 = function(v$669,v$670,v$286){(function(document,value){document.cookie=value;})(js$0Js$1.document$88,"oauth_access_token= ; expires = Thu, 01 Jan 1970 00:00:00 GMT");
(function(document,value){document.cookie=value;})(js$0Js$1.document$88,"oauth_state= ; expires = Thu, 01 Jan 1970 00:00:00 GMT");
return (function(url){return (window.location = url);})(v$286);
};
return 0;
})();
